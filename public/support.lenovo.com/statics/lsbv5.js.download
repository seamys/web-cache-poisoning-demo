"use strict";
/**
 * LSBV5 framework JS which supports Detect, ADUP, HwDiag & OsDiag
 * For a single window, it only allows to run one of the tasks simultaneously
 *
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var LSBV5;
(function (LSBV5) {
    var ExceptionEnum;
    (function (ExceptionEnum) {
        ExceptionEnum[ExceptionEnum["None"] = 0] = "None";
        ExceptionEnum[ExceptionEnum["SystemNotSupport"] = 1] = "SystemNotSupport";
        ExceptionEnum[ExceptionEnum["NoTVSU"] = 2] = "NoTVSU";
        ExceptionEnum[ExceptionEnum["ErrorLaunchTVSU"] = 3] = "ErrorLaunchTVSU";
        ExceptionEnum[ExceptionEnum["ErrorDownloadTVSU"] = 4] = "ErrorDownloadTVSU";
        ExceptionEnum[ExceptionEnum["UnhandledException"] = 5] = "UnhandledException";
        ExceptionEnum[ExceptionEnum["WrongRequest"] = 6] = "WrongRequest";
        ExceptionEnum[ExceptionEnum["NotLenovo"] = 7] = "NotLenovo";
        ExceptionEnum[ExceptionEnum["LowVersion"] = 8] = "LowVersion";
        ExceptionEnum[ExceptionEnum["Waiting"] = 9] = "Waiting";
        ExceptionEnum[ExceptionEnum["TVSUUpdateFailed"] = 10] = "TVSUUpdateFailed";
        ExceptionEnum[ExceptionEnum["VantageIsRunning"] = -3] = "VantageIsRunning";
    })(ExceptionEnum = LSBV5.ExceptionEnum || (LSBV5.ExceptionEnum = {}));
    var SysDiagExceptionEnum;
    (function (SysDiagExceptionEnum) {
        SysDiagExceptionEnum[SysDiagExceptionEnum["None"] = 0] = "None";
        SysDiagExceptionEnum[SysDiagExceptionEnum["SystemNotSupport"] = 1] = "SystemNotSupport";
        SysDiagExceptionEnum[SysDiagExceptionEnum["NoLSC"] = 2] = "NoLSC";
        SysDiagExceptionEnum[SysDiagExceptionEnum["ErrorLaunchLSC"] = 3] = "ErrorLaunchLSC";
        SysDiagExceptionEnum[SysDiagExceptionEnum["ErrorDownloadLSC"] = 4] = "ErrorDownloadLSC";
        SysDiagExceptionEnum[SysDiagExceptionEnum["LSCNotLaunch"] = 5] = "LSCNotLaunch";
        SysDiagExceptionEnum[SysDiagExceptionEnum["UnhandledException"] = 6] = "UnhandledException";
        SysDiagExceptionEnum[SysDiagExceptionEnum["WrongRequest"] = 7] = "WrongRequest";
        SysDiagExceptionEnum[SysDiagExceptionEnum["NotLenovo"] = 8] = "NotLenovo";
        SysDiagExceptionEnum[SysDiagExceptionEnum["Wait"] = 9] = "Wait";
        SysDiagExceptionEnum[SysDiagExceptionEnum["ModuleNotSupport"] = 10] = "ModuleNotSupport";
        SysDiagExceptionEnum[SysDiagExceptionEnum["NoWebAPIData"] = 11] = "NoWebAPIData";
        SysDiagExceptionEnum[SysDiagExceptionEnum["WrongWebAPIData"] = 12] = "WrongWebAPIData";
        SysDiagExceptionEnum[SysDiagExceptionEnum["VantageIsRunning"] = -3] = "VantageIsRunning";
    })(SysDiagExceptionEnum = LSBV5.SysDiagExceptionEnum || (LSBV5.SysDiagExceptionEnum = {}));
    var ADUPExceptionEnum;
    (function (ADUPExceptionEnum) {
        ADUPExceptionEnum[ADUPExceptionEnum["None"] = 0] = "None";
        ADUPExceptionEnum[ADUPExceptionEnum["SystemNotSupport"] = 1] = "SystemNotSupport";
        ADUPExceptionEnum[ADUPExceptionEnum["NoTVSU"] = 2] = "NoTVSU";
        ADUPExceptionEnum[ADUPExceptionEnum["ErrorLaunchTVSU"] = 3] = "ErrorLaunchTVSU";
        ADUPExceptionEnum[ADUPExceptionEnum["ErrorDownloadTVSU"] = 4] = "ErrorDownloadTVSU";
        ADUPExceptionEnum[ADUPExceptionEnum["UnhandledException"] = 5] = "UnhandledException";
        ADUPExceptionEnum[ADUPExceptionEnum["WrongRequest"] = 6] = "WrongRequest";
        ADUPExceptionEnum[ADUPExceptionEnum["NotLenovo"] = 7] = "NotLenovo";
        ADUPExceptionEnum[ADUPExceptionEnum["LowVersion"] = 8] = "LowVersion";
        ADUPExceptionEnum[ADUPExceptionEnum["Waiting"] = 9] = "Waiting";
        ADUPExceptionEnum[ADUPExceptionEnum["TVSUUpdateFailed"] = 10] = "TVSUUpdateFailed";
        ADUPExceptionEnum[ADUPExceptionEnum["ErrorInstallTVSU"] = 11] = "ErrorInstallTVSU";
        ADUPExceptionEnum[ADUPExceptionEnum["CommunicationFailed"] = -1] = "CommunicationFailed";
        ADUPExceptionEnum[ADUPExceptionEnum["UserCancelled"] = -2] = "UserCancelled";
        ADUPExceptionEnum[ADUPExceptionEnum["VantageIsRunning"] = -3] = "VantageIsRunning";
    })(ADUPExceptionEnum = LSBV5.ADUPExceptionEnum || (LSBV5.ADUPExceptionEnum = {}));
    var InstallPackageActionEnum;
    (function (InstallPackageActionEnum) {
        InstallPackageActionEnum[InstallPackageActionEnum["RequestStart"] = 0] = "RequestStart";
        InstallPackageActionEnum[InstallPackageActionEnum["Downloading"] = 1] = "Downloading";
        InstallPackageActionEnum[InstallPackageActionEnum["Installing"] = 2] = "Installing";
        InstallPackageActionEnum[InstallPackageActionEnum["Done"] = 3] = "Done";
    })(InstallPackageActionEnum = LSBV5.InstallPackageActionEnum || (LSBV5.InstallPackageActionEnum = {}));
    var InstallPackageStatusEnum;
    (function (InstallPackageStatusEnum) {
        InstallPackageStatusEnum[InstallPackageStatusEnum["not_started"] = 0] = "not_started";
        InstallPackageStatusEnum[InstallPackageStatusEnum["downloading"] = 1] = "downloading";
        InstallPackageStatusEnum[InstallPackageStatusEnum["download_successful"] = 2] = "download_successful";
        InstallPackageStatusEnum[InstallPackageStatusEnum["download_fail"] = 3] = "download_fail";
        InstallPackageStatusEnum[InstallPackageStatusEnum["installing"] = 4] = "installing";
        InstallPackageStatusEnum[InstallPackageStatusEnum["install_successful"] = 5] = "install_successful";
        InstallPackageStatusEnum[InstallPackageStatusEnum["install_fail"] = 6] = "install_fail";
    })(InstallPackageStatusEnum = LSBV5.InstallPackageStatusEnum || (LSBV5.InstallPackageStatusEnum = {}));
    var LsbInstallRunAction;
    (function (LsbInstallRunAction) {
        LsbInstallRunAction[LsbInstallRunAction["Detect"] = 0] = "Detect";
        LsbInstallRunAction[LsbInstallRunAction["AdupScan"] = 1] = "AdupScan";
        LsbInstallRunAction[LsbInstallRunAction["SysDiag"] = 2] = "SysDiag";
        LsbInstallRunAction[LsbInstallRunAction["OsDiag"] = 3] = "OsDiag";
        LsbInstallRunAction[LsbInstallRunAction["OsDiagScan"] = 4] = "OsDiagScan";
        LsbInstallRunAction[LsbInstallRunAction["osDiagRunById"] = 5] = "osDiagRunById";
        LsbInstallRunAction[LsbInstallRunAction["osDiagRunByName"] = 6] = "osDiagRunByName";
    })(LsbInstallRunAction = LSBV5.LsbInstallRunAction || (LSBV5.LsbInstallRunAction = {}));
    var LsbRunState;
    (function (LsbRunState) {
        LsbRunState[LsbRunState["None"] = 0] = "None";
        LsbRunState[LsbRunState["ScanInProcess"] = 1] = "ScanInProcess";
        LsbRunState[LsbRunState["TvsuInProcess"] = 2] = "TvsuInProcess";
        LsbRunState[LsbRunState["SysDiagInProcess"] = 3] = "SysDiagInProcess";
        LsbRunState[LsbRunState["AdupInProcess"] = 4] = "AdupInProcess";
    })(LsbRunState = LSBV5.LsbRunState || (LSBV5.LsbRunState = {}));
    var LSBClientStatus;
    (function (LSBClientStatus) {
        LSBClientStatus[LSBClientStatus["Installed"] = 0] = "Installed";
        LSBClientStatus[LSBClientStatus["NotInstalled"] = 1] = "NotInstalled";
        LSBClientStatus[LSBClientStatus["Updated"] = 2] = "Updated";
        LSBClientStatus[LSBClientStatus["Unknown"] = 3] = "Unknown";
    })(LSBClientStatus = LSBV5.LSBClientStatus || (LSBV5.LSBClientStatus = {}));
    var ComponentTypeEnum;
    (function (ComponentTypeEnum) {
        ComponentTypeEnum[ComponentTypeEnum["Detect"] = 0] = "Detect";
        ComponentTypeEnum[ComponentTypeEnum["Adup"] = 1] = "Adup";
        ComponentTypeEnum[ComponentTypeEnum["SysDiag"] = 2] = "SysDiag";
        ComponentTypeEnum[ComponentTypeEnum["OsDiag"] = 3] = "OsDiag";
    })(ComponentTypeEnum = LSBV5.ComponentTypeEnum || (LSBV5.ComponentTypeEnum = {}));
    var CommandTypeEnum;
    (function (CommandTypeEnum) {
        CommandTypeEnum[CommandTypeEnum["CheckLsb"] = 0] = "CheckLsb";
        CommandTypeEnum[CommandTypeEnum["Scan"] = 1] = "Scan";
        CommandTypeEnum[CommandTypeEnum["DownloadCancel"] = 2] = "DownloadCancel";
        CommandTypeEnum[CommandTypeEnum["InstallCancel"] = 3] = "InstallCancel";
        CommandTypeEnum[CommandTypeEnum["InstallTvsu"] = 4] = "InstallTvsu";
        CommandTypeEnum[CommandTypeEnum["InstallPackage"] = 5] = "InstallPackage";
        CommandTypeEnum[CommandTypeEnum["OsDiag"] = 6] = "OsDiag";
        CommandTypeEnum[CommandTypeEnum["OsDiagScan"] = 7] = "OsDiagScan";
        CommandTypeEnum[CommandTypeEnum["OsDiagRunById"] = 8] = "OsDiagRunById";
        CommandTypeEnum[CommandTypeEnum["OsDiagRunByName"] = 9] = "OsDiagRunByName";
        CommandTypeEnum[CommandTypeEnum["ScanCancel"] = 10] = "ScanCancel";
    })(CommandTypeEnum = LSBV5.CommandTypeEnum || (LSBV5.CommandTypeEnum = {}));
    var EventTypeEnum;
    (function (EventTypeEnum) {
        EventTypeEnum[EventTypeEnum["NoEvent"] = 0] = "NoEvent";
        EventTypeEnum[EventTypeEnum["NeedUpdateLsb"] = 1] = "NeedUpdateLsb";
        EventTypeEnum[EventTypeEnum["LSBUpdateFailed"] = 2] = "LSBUpdateFailed";
        EventTypeEnum[EventTypeEnum["LSBUpdateSuccess"] = 3] = "LSBUpdateSuccess";
        EventTypeEnum[EventTypeEnum["PingFailed"] = 4] = "PingFailed";
        EventTypeEnum[EventTypeEnum["PingSuccess"] = 5] = "PingSuccess";
        //Common Event
        EventTypeEnum[EventTypeEnum["NotLenovo"] = 6] = "NotLenovo";
        EventTypeEnum[EventTypeEnum["Waiting"] = 7] = "Waiting";
        EventTypeEnum[EventTypeEnum["SystemNotSupport"] = 8] = "SystemNotSupport";
        EventTypeEnum[EventTypeEnum["UnhandledException"] = 9] = "UnhandledException";
        EventTypeEnum[EventTypeEnum["WrongRequest"] = 10] = "WrongRequest";
        EventTypeEnum[EventTypeEnum["UserCancelled"] = 11] = "UserCancelled";
        EventTypeEnum[EventTypeEnum["CommandFinished"] = 12] = "CommandFinished";
        EventTypeEnum[EventTypeEnum["OtherModuleWasRunning"] = 13] = "OtherModuleWasRunning";
        //Redirect Page Event
        EventTypeEnum[EventTypeEnum["RedirectSuccess"] = 14] = "RedirectSuccess";
        EventTypeEnum[EventTypeEnum["RedirectFailed"] = 15] = "RedirectFailed";
        //Detect Event
        EventTypeEnum[EventTypeEnum["DetectSuccess"] = 16] = "DetectSuccess";
        EventTypeEnum[EventTypeEnum["DetectFailed"] = 17] = "DetectFailed";
        //ADUP Event
        EventTypeEnum[EventTypeEnum["ADUPSuccess"] = 18] = "ADUPSuccess";
        EventTypeEnum[EventTypeEnum["ADUPFailed"] = 19] = "ADUPFailed";
        EventTypeEnum[EventTypeEnum["ADUPStatusSuccess"] = 20] = "ADUPStatusSuccess";
        EventTypeEnum[EventTypeEnum["ADUPStatusFinish"] = 21] = "ADUPStatusFinish";
        EventTypeEnum[EventTypeEnum["ADUPCancelSuccess"] = 22] = "ADUPCancelSuccess";
        EventTypeEnum[EventTypeEnum["ADUPCancelFailed"] = 23] = "ADUPCancelFailed";
        EventTypeEnum[EventTypeEnum["ADUPInstallPackageFailed"] = 24] = "ADUPInstallPackageFailed";
        EventTypeEnum[EventTypeEnum["ADUPInstallConfirmNo"] = 25] = "ADUPInstallConfirmNo";
        EventTypeEnum[EventTypeEnum["ADUPInstallStatus"] = 26] = "ADUPInstallStatus";
        EventTypeEnum[EventTypeEnum["ADUPInstallPackageProcessFinished"] = 27] = "ADUPInstallPackageProcessFinished";
        EventTypeEnum[EventTypeEnum["NoTVSU"] = 28] = "NoTVSU";
        EventTypeEnum[EventTypeEnum["ErrorLaunchTVSU"] = 29] = "ErrorLaunchTVSU";
        EventTypeEnum[EventTypeEnum["ErrorDownloadTVSU"] = 30] = "ErrorDownloadTVSU";
        EventTypeEnum[EventTypeEnum["LowVersion"] = 31] = "LowVersion";
        EventTypeEnum[EventTypeEnum["InstallTVSUSuccess"] = 32] = "InstallTVSUSuccess";
        EventTypeEnum[EventTypeEnum["InstallTVSUFailed"] = 33] = "InstallTVSUFailed";
        EventTypeEnum[EventTypeEnum["InstallTVSUInstalling"] = 34] = "InstallTVSUInstalling";
        EventTypeEnum[EventTypeEnum["InstallTVSUCancelled"] = 35] = "InstallTVSUCancelled";
        EventTypeEnum[EventTypeEnum["InstallTVSUCancelFailed"] = 36] = "InstallTVSUCancelFailed";
        EventTypeEnum[EventTypeEnum["DownloadTVSUStatus"] = 37] = "DownloadTVSUStatus";
        EventTypeEnum[EventTypeEnum["DownloadTVSUCancel"] = 38] = "DownloadTVSUCancel";
        EventTypeEnum[EventTypeEnum["DownloadTVSUCancelFailed"] = 39] = "DownloadTVSUCancelFailed";
        EventTypeEnum[EventTypeEnum["DownloadTVSUPause"] = 40] = "DownloadTVSUPause";
        EventTypeEnum[EventTypeEnum["DownloadTVSUError"] = 41] = "DownloadTVSUError";
        EventTypeEnum[EventTypeEnum["TVSUUpdateFailed"] = 42] = "TVSUUpdateFailed";
        EventTypeEnum[EventTypeEnum["ADUPDetectInfoSuccess"] = 43] = "ADUPDetectInfoSuccess";
        //Diag Event
        EventTypeEnum[EventTypeEnum["DiagSuccess"] = 44] = "DiagSuccess";
        EventTypeEnum[EventTypeEnum["DiagFailed"] = 45] = "DiagFailed";
        EventTypeEnum[EventTypeEnum["DiagStatusSuccess"] = 46] = "DiagStatusSuccess";
        EventTypeEnum[EventTypeEnum["DiagStatusFailed"] = 47] = "DiagStatusFailed";
        EventTypeEnum[EventTypeEnum["DiagCancelSuccess"] = 48] = "DiagCancelSuccess";
        EventTypeEnum[EventTypeEnum["DiagCancelFailed"] = 49] = "DiagCancelFailed";
        EventTypeEnum[EventTypeEnum["NoLSC"] = 50] = "NoLSC";
        EventTypeEnum[EventTypeEnum["ErrorLaunchLSC"] = 51] = "ErrorLaunchLSC";
        EventTypeEnum[EventTypeEnum["ErrorDownloadLSC"] = 52] = "ErrorDownloadLSC";
        EventTypeEnum[EventTypeEnum["LSCNotLaunch"] = 53] = "LSCNotLaunch";
        EventTypeEnum[EventTypeEnum["InstallLSCSuccess"] = 54] = "InstallLSCSuccess";
        EventTypeEnum[EventTypeEnum["InstallLSCFailed"] = 55] = "InstallLSCFailed";
        EventTypeEnum[EventTypeEnum["DownloadLSCStatus"] = 56] = "DownloadLSCStatus";
        EventTypeEnum[EventTypeEnum["DownloadLSCPause"] = 57] = "DownloadLSCPause";
        EventTypeEnum[EventTypeEnum["DownloadLSCError"] = 58] = "DownloadLSCError";
        EventTypeEnum[EventTypeEnum["DownloadLSCCancel"] = 59] = "DownloadLSCCancel";
        EventTypeEnum[EventTypeEnum["DownloadLSCCancelFailed"] = 60] = "DownloadLSCCancelFailed";
        EventTypeEnum[EventTypeEnum["InstallLSCCancelled"] = 61] = "InstallLSCCancelled";
        EventTypeEnum[EventTypeEnum["InstallLSCCancelFailed"] = 62] = "InstallLSCCancelFailed";
        EventTypeEnum[EventTypeEnum["InstallLSCInstalling"] = 63] = "InstallLSCInstalling";
        EventTypeEnum[EventTypeEnum["NoWebAPIData"] = 64] = "NoWebAPIData";
        EventTypeEnum[EventTypeEnum["WrongWebAPIData"] = 65] = "WrongWebAPIData";
        EventTypeEnum[EventTypeEnum["ModuleNotSupport"] = 66] = "ModuleNotSupport";
        //OSDiag
        EventTypeEnum[EventTypeEnum["OSDiagScanSuccess"] = 67] = "OSDiagScanSuccess";
        EventTypeEnum[EventTypeEnum["OSDiagScanFailed"] = 68] = "OSDiagScanFailed";
        EventTypeEnum[EventTypeEnum["OSDiagRunSuccess"] = 69] = "OSDiagRunSuccess";
        EventTypeEnum[EventTypeEnum["OSDiagRunFailed"] = 70] = "OSDiagRunFailed";
        EventTypeEnum[EventTypeEnum["OSDiagRunByIdSuccess"] = 71] = "OSDiagRunByIdSuccess";
        EventTypeEnum[EventTypeEnum["OSDiagRunByIdFailed"] = 72] = "OSDiagRunByIdFailed";
        // Close Install callback
        EventTypeEnum[EventTypeEnum["CloseInstallCallBack"] = 73] = "CloseInstallCallBack";
        EventTypeEnum[EventTypeEnum["LSBSelectAgree"] = 74] = "LSBSelectAgree";
        EventTypeEnum[EventTypeEnum["ADUPStatusFailed"] = 75] = "ADUPStatusFailed";
        EventTypeEnum[EventTypeEnum["ADUPInstallStatusSuccess"] = 76] = "ADUPInstallStatusSuccess";
        EventTypeEnum[EventTypeEnum["ADUPInstallStatusFailed"] = 77] = "ADUPInstallStatusFailed";
        EventTypeEnum[EventTypeEnum["VantageIsRunning"] = 78] = "VantageIsRunning";
    })(EventTypeEnum = LSBV5.EventTypeEnum || (LSBV5.EventTypeEnum = {}));
    var DownloadFilesInfo = /** @class */ (function () {
        function DownloadFilesInfo() {
            this.FileId = "";
            this.Url = "";
            this.Name = "";
            this.DSName = "";
            this.Version = "";
            this.Released = "";
        }
        return DownloadFilesInfo;
    }());
    LSBV5.DownloadFilesInfo = DownloadFilesInfo;
    var TaskType;
    (function (TaskType) {
        TaskType[TaskType["IDLE"] = 0] = "IDLE";
        TaskType[TaskType["DETECT"] = 1] = "DETECT";
        TaskType[TaskType["ADUP"] = 2] = "ADUP";
        TaskType[TaskType["HWDIAG"] = 3] = "HWDIAG";
        TaskType[TaskType["OSDIAG"] = 4] = "OSDIAG";
    })(TaskType = LSBV5.TaskType || (LSBV5.TaskType = {}));
    var CurrentLSBType;
    (function (CurrentLSBType) {
        CurrentLSBType["standalone"] = "Standalone";
        CurrentLSBType["vantage"] = "Vantage";
    })(CurrentLSBType = LSBV5.CurrentLSBType || (LSBV5.CurrentLSBType = {}));
    var AdupPackageInfo = /** @class */ (function () {
        function AdupPackageInfo() {
            this.ID = "";
            this.Title = "";
            this.Dependency = "";
        }
        return AdupPackageInfo;
    }());
    LSBV5.AdupPackageInfo = AdupPackageInfo;
    var Constants = /** @class */ (function () {
        function Constants() {
        }
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
        Constants.INTERVAL_TICKS = 4000;
        Constants.REQUEST_TIMEOUT = 20000;
        Constants.DetectTime = 5000;
        Constants.REQUEST_RETRY_COUNT = 5;
        Constants.REQUEST_RETRY_COUNT_WAITING_INSTALL = 30;
        Constants.COOKIE_EXPIRATION_DAYS = 10;
        Constants.VERSION = '5.0.2.8';
        // URL interacts with LSB client
        Constants.useCors = true;
        Constants.HAND_SHAKE_URL = 'http://localhost:50128';
        Constants.DETECT_URL = 'http://localhost:50128/Detect';
        Constants.OS_DIAG_GET_AVAILABLE_URL = 'http://localhost:50128/OsDiagScan';
        Constants.OS_DIAG_RUN_BY_ID_URL = 'http://localhost:50128/OsDiagRunById';
        Constants.OS_DIAG_SCAN = "OsDiagScan";
        Constants.OS_DIAG_RUN_BY_ID = "OsDiagRunById";
        Constants.OS_DIAG_RUN_BY_NAME = "OsDiagRunByName";
        Constants.OS_DIAG_RUN_BY_URL = "OsDiagRunByUrl";
        // UI related 
        Constants.LSB_DIALOG_ID = "lsb-v5-dialog";
        Constants.LSB_DIALOG_CHECK_ID = "lsb-checking";
        Constants.LSB_DIALOG_CONFIRM_ID = "lsb-confirm";
        Constants.LSB_DIALOG_CLOSE_ID = "lsb-v5-close";
        Constants.LSB_DIALOG_INSTRUCTION_ID = "lsb-instruction";
        Constants.LSB_DIALOG_DOWNLOAD_ID = "lsb-v5-download-start";
        Constants.LSB_DIALOG_DOWNLOAD_CONFIRM_ID = "lsb-download-confirm";
        Constants.LSB_DIALOG_RETRY_DOWNLOAD = "retry-download";
        Constants.LSB_DIALOG_DOWNLOAD_IFRAME = "download-iframe";
        Constants.LSB_DIALOG_OVERDUE_ID = "lsb-overdue";
        Constants.LSB_INSTALL_TERMS_CONDITION_ID = "terms-condition";
        Constants.LSB_INSTALL_EN = "/esv4/plugins/lsbv5/lsb_en.html";
        Constants.LSB_INSTALL_JA = "/esv4/plugins/lsbv5/lsb_ja.html";
        Constants.LSB_TERMS_CONDITION_TEST = "https://uatesupport.lenovo.com/documents/HT508930";
        Constants.LSB_TERMS_CONDITION_PRD = "https://support.lenovo.com/documents/lsb-terms-condition";
        Constants.LSB_DIALOG_IE_TIPS_ID = "lsb-v5-download-ie-tips";
        Constants.FORCE_UPDATE_TIME = 90;
        Constants.FORCE_UPDATE_INTERVAL = '';
        Constants.DOWNLOAD_LSB = false;
        // LSB setup
        Constants.LSB_SETUP_PATH_TEST = "https://10.122.11.56/LSBSetup.exe";
        Constants.LSB_SETUP_PATH_PRD = "https://download.lenovo.com/lsbv5/LSBSetup.exe";
        Constants.LSB_SETUP_FILE_NAME = "lsbsetup";
        Constants.LSB_PRD_SITES = ["support.lenovo.com", "pcsupport.lenovo.com"];
        /**
         * These messages could be translation keys
         */
        Constants.MESSAGE_LSB_RUNNING_FOR_HWDIAG = (_d = (_c = (_a = window["l"]) === null || _a === void 0 ? void 0 : (_b = _a).Translator) === null || _c === void 0 ? void 0 : _c.call(_b, "lsb running for hardware diag|LSB is running for hardware diagnostics"), (_d !== null && _d !== void 0 ? _d : 'LSB is running for hardware diagnostics'));
        Constants.MESSAGE_LSB_RUNNING_FOR_OSDIAG = (_h = (_g = (_e = window["l"]) === null || _e === void 0 ? void 0 : (_f = _e).Translator) === null || _g === void 0 ? void 0 : _g.call(_f, "lsb running for os diag|LSB is running for os diagnostics"), (_h !== null && _h !== void 0 ? _h : 'LSB is running for os diagnostics'));
        Constants.MESSAGE_LSB_RUNNING_FOR_DETECT = (_m = (_l = (_j = window["l"]) === null || _j === void 0 ? void 0 : (_k = _j).Translator) === null || _l === void 0 ? void 0 : _l.call(_k, "lsb running for detect|LSB is running for detect"), (_m !== null && _m !== void 0 ? _m : 'LSB is running for detect'));
        Constants.MESSAGE_LSB_RUNNING_FOR_ADUP = (_r = (_q = (_o = window["l"]) === null || _o === void 0 ? void 0 : (_p = _o).Translator) === null || _q === void 0 ? void 0 : _q.call(_p, "lsb running for adup|LSB is running for auto driver update"), (_r !== null && _r !== void 0 ? _r : 'LSB is running for auto driver update'));
        return Constants;
    }());
    LSBV5.Constants = Constants;
    var Core = /** @class */ (function () {
        function Core() {
        }
        Core.setCurrentRunState = function (comType, currentStatus, nextRunAction, data) {
            var runMessage = {
                ActionName: comType,
                RunState: currentStatus,
                NextRunAction: nextRunAction,
                RequestData: data
            };
            Cookies.set("LsbRunStatus", JSON.stringify(runMessage));
        };
        Core.getCurrentRunState = function () {
            $('.lsb-v5-upgrading').hide();
            $('.lsb-v5-checking-text').show();
            $('.lsb-v5-updating-text').hide();
            var getRunMessage = Cookies.get("LsbRunStatus");
            var runMessage = {};
            if (getRunMessage) {
                runMessage = JSON.parse(getRunMessage);
            }
            return runMessage;
        };
        Core.removeCurrentRunState = function () {
            Cookies.remove("LsbRunStatus");
        };
        Core.registerEmitter = function () {
            LSBV5.Emitter.register("checkTheLsbIsRun", LSBV5.Core.checkLsbIsRunning, LSBV5.Core);
            LSBV5.Emitter.register("checkLsbInstall", LSBV5.Core.handShakeWithLSB, LSBV5.Core, 10000);
            LSBV5.Emitter.register("checkAddInIsUsable", LSBV5.Core.handShakeWithLSB, LSBV5.Core);
        };
        Core.runCheckLsb = function (data) {
            if (data) {
                var runMessage = data;
                LSBV5.Adup.setCurrentRunState(runMessage.ActionName, runMessage.RunState, runMessage.NextRunAction, runMessage.RequestData);
                switch (runMessage.ActionName) {
                    case runMessage.ActionName = ComponentTypeEnum.Adup:
                        LSBV5.Adup.registerEmitter();
                        break;
                    case runMessage.ActionName = ComponentTypeEnum.SysDiag:
                        LSBV5.HwDiag.registerEmitter();
                        break;
                    case runMessage.ActionName = ComponentTypeEnum.OsDiag:
                        LSBV5.OsDiag.registerEmitter();
                        break;
                    default:
                        LSBV5.Detect.registerEmitter();
                        break;
                }
            }
            else {
                LSBV5.Detect.registerEmitter();
            }
            LSBV5.Emitter.fire("checkTheLsbIsRun", [Core.checkTheLsbIsRunSuccess, Core.checkTheLsbIsRunFailure]);
        };
        Core.checkTheLsbIsRunSuccess = function (data) {
            Core.outLogger("checkTheLsbIsRunSuccess", data);
            //Core.isCallback(EventTypeEnum.RedirectSuccess, ComponentTypeEnum.Detect, data);
        };
        Core.checkTheLsbIsRunFailure = function (data) {
            Core.outLogger("checkTheLsbIsRunFailure", data);
        };
        Core.isCallback = function (eType, comType, data) {
            var action = LSBV5.Dispatcher.getAction(eType, comType);
            var RedirectSuccess = LSBV5.Dispatcher.getEventListener(action);
            if (RedirectSuccess) {
                for (var index = 0; index < RedirectSuccess.length; index++) {
                    RedirectSuccess[index].EventHandler(data, eType);
                    Adup.LAST_EVENT_TYPE = eType;
                }
            }
            else {
                console.log("eType: " + eType + "comType: " + comType + " not exists!");
            }
        };
        Core.outLogger = function (method, messages) {
            var outMess = "";
            if (typeof messages == 'string') {
                outMess = messages;
            }
            else {
                outMess = JSON.stringify(messages);
            }
            console.log("the method " + method + " : ", outMess);
        };
        Core.getRequestURL = function (action) {
            var requestUrl = '';
            var getPortIndex = Cookies.get("LsbPortIndex");
            if (getPortIndex) {
                requestUrl = "http://localhost:" + Core.LOCAL_PORT_ARRAY[getPortIndex] + "/" + action;
            }
            return requestUrl;
        };
        Core.portExists = function () {
            var result = false;
            var pIndexStr = Cookies.get("LsbPortIndex") || "-1";
            var pIndexNum = parseInt(pIndexStr);
            if (0 <= pIndexNum && pIndexNum <= 2) {
                this.LOCAL_PORT_INDEX = pIndexNum;
                result = true;
            }
            return result;
        };
        Core.useStandaloneLSB = function (onSucceed) {
            Core.LOCAL_PORT_ARRAY = Core.STANDALONE_PORT_ARRAY;
            $('.lsb-add-in-tc-no-launched').hide();
            $('.lsb-checking').show();
            $('.lsb-v5-process').hide();
            if (!this.portExists()) {
                console.log("Checking all ports...");
                Cookies.remove("LsbPortIndex");
                Core.LOCAL_PORT_INDEX = 0;
            }
            Core.handShakeWithLSB(Core.handShakeSucceed, Core.handShakeFailed);
            var timerId;
            var action = function () {
                if (Core.lsbClientStatus == LSBClientStatus.Installed) {
                    clearInterval(timerId);
                    onSucceed && onSucceed();
                }
                else if (Core.lsbClientStatus == LSBClientStatus.NotInstalled) {
                    clearInterval(timerId);
                    Core.showLSBConfirmPage();
                }
                else if (Core.lsbClientStatus == LSBClientStatus.Updated) {
                    clearInterval(timerId);
                }
            };
            timerId = setInterval(action, Constants.INTERVAL_TICKS);
        };
        Core.addInLSB25 = function () {
            var _this = this;
            // Core.LOCAL_PORT_ARRAY = Core.ADD_IN_PORT_ARRAY;
            $('.lsb-v5-process .process-text').text('25%');
            $('.lsb-v5-process .process-block').css('width', '25%');
            $('.lsb-v5-process').show();
            this.load();
            // Core.handShakeWithLSB(Core.handShakeSucceed, () => {
            //     _this.addInLSB50();
            // });
        };
        Core.addInLSB50 = function () {
            $('.lsb-checking').hide();
            $('.lsb-add-in-tc').show();
            $('.process-text').text('50%');
            $('.process-block').css('width', '50%');
        };
        Core.addInLSB75 = function () {
            var _this = this;
            $('.open-agreement')[0].click();
            $('.lsb-add-in-tc .lsb-v5-download-confirm').hide();
            $('.lsb-add-in-tc .lsb-v5-addin-continue').hide();
            $('.process-text').text('75%');
            $('.process-block').css('width', '75%');
            $('.lsb-add-in-tc .lsb-loading-img').show();
            _this.addInLSB();
        };
        Core.addInLSB = function () {
            if (!this.portExists()) {
                console.log("Checking all ports...");
                Cookies.remove("LsbPortIndex");
                Core.LOCAL_PORT_INDEX = 0;
            }
            LSBV5.Emitter.fire("checkAddInIsUsable", [Core.handShakeSucceed, ''], true);
            Core.VERIFY_AGREE_RULE = setTimeout(function () {
                if (Core.lsbClientStatus != LSBClientStatus.Installed) {
                    $('.lsb-add-in-tc').hide();
                    $('.lsb-add-in-tc-try-again').hide();
                    $('.lsb-add-in-tc-no-launched').show();
                }
                clearTimeout(Core.VERIFY_AGREE_RULE);
                Core.VERIFY_AGREE_RULE = '';
            }, 10000);
            // Core.handShakeWithLSB(Core.handShakeSucceed, ()=>{
            //     $('.lsb-add-in-tc').hide();
            //     $('.lsb-add-in-tc-try-again').hide();
            //     $('.lsb-add-in-tc-no-launched').show();
            // });
        };
        Core.checkLsbIsRunning = function (onSucceed) {
            var _this_1 = this;
            Core.lsbClientStatus = LSBClientStatus.Unknown;
            Core.showLSBDialog(function () {
                var ua = navigator.userAgent.toLowerCase();
                var index = ua.indexOf("windows nt ");
                var aboveWin10 = false;
                if (index != -1) {
                    var version = parseFloat(ua.substring(index + 11, index + 14));
                    if (version >= 10.0) {
                        aboveWin10 = true;
                    }
                }
                var currentRunItem = Core.getCurrentRunState();
                var sysDiagIsRunning = currentRunItem.ActionName && (currentRunItem.ActionName == ComponentTypeEnum.SysDiag);
                if (aboveWin10 && !sysDiagIsRunning && !window["forceUseStandalone"]) {
                    window["forceUseStandalone"] = false;
                    _this_1.addInLSB25();
                }
                else {
                    _this_1.useStandaloneLSB(onSucceed);
                }
            });
        };
        Core.sendShakeCorsGetRequest = function (req) {
            return new Promise(function (resolve, reject) {
                var data = "?Current-Version=" + Constants.VERSION +
                    "&data=" + req.data +
                    "&domain=" + window.location.host.split(":")[0];
                $.ajax({
                    url: req.url + data,
                    contentType: "application/json; charset=utf-8",
                    type: 'GET',
                    dataType: 'json',
                    error: function (xhr) {
                        console.log("onerror sendRequest failed:" + JSON.stringify(xhr));
                        resolve('');
                    },
                    success: function (xhr) {
                        console.log(xhr);
                        resolve(xhr);
                    },
                    timeout: Constants.REQUEST_TIMEOUT
                });
            });
        };
        Core.load = function () {
            return __awaiter(this, void 0, void 0, function () {
                var standAloneSuccessData, addInSuccessData, p1, p2;
                var _this_1 = this;
                return __generator(this, function (_a) {
                    standAloneSuccessData = '';
                    addInSuccessData = '';
                    p1 = this.sendShakeCorsGetRequest({ url: 'http://localhost:50128' });
                    p2 = this.sendShakeCorsGetRequest({ url: 'http://localhost:50131' });
                    Promise.all([p1, p2]).then(function (result) {
                        standAloneSuccessData = result[0], addInSuccessData = result[1];
                        if (standAloneSuccessData) {
                            Core.LOCAL_PORT_ARRAY = Core.STANDALONE_PORT_ARRAY;
                            Core.LOCAL_PORT_INDEX = 0;
                            Core.handShakeSucceed(standAloneSuccessData);
                        }
                        else if (addInSuccessData) {
                            Core.LOCAL_PORT_ARRAY = Core.ADD_IN_PORT_ARRAY;
                            Core.LOCAL_PORT_INDEX = 0;
                            Core.handShakeSucceed(addInSuccessData);
                        }
                        else {
                            Core.LOCAL_PORT_ARRAY = Core.ADD_IN_PORT_ARRAY;
                            Core.LOCAL_PORT_INDEX = 0;
                            _this_1.addInLSB50();
                        }
                    }).catch(function (error) {
                        console.log(error);
                    });
                    return [2 /*return*/];
                });
            });
        };
        Core.handShakeSucceed = function (data) {
            console.log('handShakeSucceed' + data);
            if (data.returnCode === 2) {
                Core.lsbClientStatus = LSBClientStatus.Updated;
                $('.lsb-v5-upgrading').show();
                $('.lsb-v5-checking-text').hide();
                $('.lsb-v5-updating-text').show();
                setTimeout(function () {
                    console.log('Find the Update,please waiting 30s for updating!');
                    LSBV5.Emitter.fire("checkLsbInstall", [Core.handShakeSucceed, Core.handShakeFailed], true);
                }, 30000);
                if (Constants.FORCE_UPDATE_TIME == 90) {
                    Constants.FORCE_UPDATE_INTERVAL = setInterval(function () {
                        Constants.FORCE_UPDATE_TIME--;
                        if (Constants.FORCE_UPDATE_TIME <= 0) {
                            clearInterval(Constants.FORCE_UPDATE_INTERVAL);
                            console.log("LSB is not running now, need to install...");
                            Cookies.remove("LsbPortIndex");
                            Core.LOCAL_PORT_INDEX = 0;
                            Core.lsbClientStatus = LSBClientStatus.NotInstalled;
                            $('.lsb-v5-wrap .lsb-v5-description.lsb-confirm .lsb-v5-download-force').show();
                            Core.showLSBConfirmPage();
                        }
                    }, 1000);
                }
            }
            else {
                if (Core.LOCAL_PORT_ARRAY.toString() == Core.ADD_IN_PORT_ARRAY.toString()) {
                    LSBV5.Emitter.remove("checkAddInIsUsable", function () { }, LSBV5.Core);
                    $("." + Constants.LSB_DIALOG_ID).hide();
                    $('.lsb-v5-description').hide();
                    $('.lsb-checking').show();
                    $('.lsb-v5-process .process-text').text('25%');
                    $('.lsb-v5-process .process-block').css('width', '25%');
                    $('.lsb-add-in-tc .lsb-v5-addin-continue').show();
                    $('.lsb-add-in-tc .lsb-loading-img').hide();
                    $('.lsb-add-in-tc .lsb-v5-download-confirm').show();
                    if (Core.VERIFY_AGREE_RULE) {
                        clearTimeout(Core.VERIFY_AGREE_RULE);
                        Core.VERIFY_AGREE_RULE = '';
                    }
                    Cookies.set("currentUseLSB", CurrentLSBType.vantage, { expires: 365, path: '/', domain: '.lenovo.com' });
                }
                else {
                    Cookies.set("currentUseLSB", CurrentLSBType.standalone, { expires: 365, path: '/', domain: '.lenovo.com' });
                }
                if (Constants.FORCE_UPDATE_INTERVAL) {
                    clearInterval(Constants.FORCE_UPDATE_INTERVAL);
                }
                Core.lsbClientStatus = LSBClientStatus.Installed;
                Cookies.set("LsbPortIndex", Core.LOCAL_PORT_INDEX.toString());
                LSBV5.Emitter.reRegister("checkLsbInstall", LSBV5.Core.handShakeWithLSB, LSBV5.Core);
                $("." + Constants.LSB_DIALOG_ID).hide();
                //Core.isCallback(EventTypeEnum.RedirectSuccess, ComponentTypeEnum.Detect, data);
                Core.RedirectSuccess(data);
            }
        };
        Core.RedirectSuccess = function (data) {
            var CurrentRunItem = LSBV5.Core.getCurrentRunState();
            switch (CurrentRunItem.NextRunAction) {
                case CurrentRunItem.NextRunAction = LSBV5.LsbInstallRunAction.AdupScan:
                    LSBV5.Dispatcher.execCommand(LSBV5.ComponentTypeEnum.Adup, LSBV5.CommandTypeEnum.Scan, CurrentRunItem.RequestData);
                    break;
                case CurrentRunItem.NextRunAction = LSBV5.LsbInstallRunAction.SysDiag:
                    LSBV5.Dispatcher.execCommand(LSBV5.ComponentTypeEnum.SysDiag, LSBV5.CommandTypeEnum.Scan, CurrentRunItem.RequestData);
                    break;
                case CurrentRunItem.NextRunAction = LSBV5.LsbInstallRunAction.OsDiag:
                    LSBV5.Dispatcher.execCommand(LSBV5.ComponentTypeEnum.OsDiag, LSBV5.CommandTypeEnum.OsDiag, CurrentRunItem.RequestData);
                    break;
                case CurrentRunItem.NextRunAction = LSBV5.LsbInstallRunAction.OsDiagScan:
                    LSBV5.Dispatcher.execCommand(LSBV5.ComponentTypeEnum.OsDiag, LSBV5.CommandTypeEnum.OsDiagScan);
                    break;
                case CurrentRunItem.NextRunAction = LSBV5.LsbInstallRunAction.osDiagRunById:
                    LSBV5.Dispatcher.execCommand(LSBV5.ComponentTypeEnum.OsDiag, LSBV5.CommandTypeEnum.OsDiagRunById, CurrentRunItem.RequestData);
                    break;
                case CurrentRunItem.NextRunAction = LSBV5.LsbInstallRunAction.osDiagRunByName:
                    LSBV5.Dispatcher.execCommand(LSBV5.ComponentTypeEnum.OsDiag, LSBV5.CommandTypeEnum.OsDiagRunByName, CurrentRunItem.RequestData);
                    break;
                default:
                    //LSBV5.Detect.requestDetect(LSBV5.Detect.detectSucceed);
                    LSBV5.Emitter.fire("lsbDetect", [LSBV5.Detect.detectSucceed, '']);
                    break;
            }
        };
        Core.handShakeFailed = function () {
            Core.LOCAL_PORT_INDEX++;
            if (Core.LOCAL_PORT_INDEX >= Core.LOCAL_PORT_ARRAY.length) {
                console.log("LSB is not running now, need to install...");
                Cookies.remove("LsbPortIndex");
                Core.LOCAL_PORT_INDEX = 0;
                Core.lsbClientStatus = LSBClientStatus.NotInstalled;
                if (Constants.DOWNLOAD_LSB) {
                    LSBV5.Emitter.fire("checkLsbInstall", [Core.handShakeSucceed, Core.handShakeFailed], false);
                }
            }
            else {
                Core.handShakeWithLSB(Core.handShakeSucceed, Core.handShakeFailed);
            }
        };
        Core.handShakeWithLSB = function (onSucceed, onFail) {
            var getPort = Core.LOCAL_PORT_ARRAY[Core.LOCAL_PORT_INDEX];
            if (getPort) {
                var url = "http://localhost:" + getPort;
                var req = {
                    url: url
                };
                this.sendRequest(req, onSucceed, onFail);
            }
        };
        Core.sendJsonpOrCorsRequest = function (req, onSucceed, onFail) {
            var _this_1 = this;
            window["LSBV5Callback"] = function (json) {
                // The token is invalid
                if (json.hasOwnProperty("tokenIsValid")) {
                    $('.lsb-v5-description').hide();
                    $("." + Constants.LSB_DIALOG_OVERDUE_ID).show();
                    return;
                }
                onSucceed && onSucceed(json);
            };
            $.ajax({
                url: req.url,
                contentType: "application/json; charset=utf-8",
                data: {
                    "eSupport_SessionID_e": window["lsbToken"],
                    "Current-Version": Constants.VERSION,
                    "data": req.data,
                    "domain": window.location.host.split(":")[0]
                },
                dataType: "jsonp",
                jsonpCallback: "LSBV5Callback",
                error: function (xhr) {
                    console.log("sendRequest failed:" + JSON.stringify(xhr));
                    _this_1.sendCorsGetRequest(_this_1, false, req, onSucceed, onFail);
                },
                timeout: Constants.REQUEST_TIMEOUT
            });
        };
        Core.sendRequest = function (req, onSucceed, onFail, requestType) {
            if (Constants.useCors) {
                if (requestType == 'post') {
                    this.sendCorsPostRequest(this, false, req, onSucceed, onFail);
                }
                else {
                    this.sendCorsGetRequest(this, false, req, onSucceed, onFail);
                }
            }
            else {
                this.sendJsonpRequest(req, onSucceed, onFail);
            }
        };
        Core.sendJsonpRequest = function (req, onSucceed, onFail) {
            window["LSBV5Callback"] = function (json) {
                // The token is invalid
                if (json.hasOwnProperty("tokenIsValid")) {
                    $('.lsb-v5-description').hide();
                    $("." + Constants.LSB_DIALOG_OVERDUE_ID).show();
                    return;
                }
                onSucceed && onSucceed(json);
            };
            $.ajax({
                url: req.url,
                contentType: "application/json; charset=utf-8",
                data: {
                    "eSupport_SessionID_e": window["lsbToken"],
                    "Current-Version": Constants.VERSION,
                    "data": req.data,
                    "domain": window.location.host.split(":")[0]
                },
                dataType: "jsonp",
                jsonpCallback: "LSBV5Callback",
                error: function (xhr) {
                    console.log("sendRequest failed:" + JSON.stringify(xhr));
                    onFail && onFail();
                },
                timeout: Constants.REQUEST_TIMEOUT
            });
        };
        Core.sendCorsGetRequest = function (context, hasRetry, req, onSucceed, onFail) {
            var _this = this;
            var data = "?Current-Version=" + Constants.VERSION +
                "&data=" + req.data +
                "&domain=" + window.location.host.split(":")[0];
            $.ajax({
                url: req.url + data,
                contentType: "application/json; charset=utf-8",
                type: 'GET',
                dataType: 'json',
                cache: false,
                error: function (xhr) {
                    console.log("onerror sendRequest failed:" + JSON.stringify(xhr));
                    if (xhr.readyState == 4 && xhr.status == 200 && xhr.statusText == "load" && hasRetry) {
                        context.retry--;
                        console.log('retry:' + context.retry);
                        if (context.retry < 0) {
                            $('.lsb-v5-description').hide();
                            $('.lsb-requestInterrupt').show();
                            $("." + Constants.LSB_DIALOG_ID).show();
                            onFail && onFail();
                        }
                        else {
                            onFail && onFail();
                        }
                    }
                    else {
                        onFail && onFail();
                    }
                },
                success: function (xhr) {
                    onSucceed && onSucceed(xhr);
                },
                timeout: Constants.REQUEST_TIMEOUT
            });
        };
        Core.sendCorsPostRequest = function (context, hasRetry, req, onSucceed, onFail) {
            var _this = this;
            var xhr = new XMLHttpRequest();
            var lsbToken = window["lsbToken"];
            var data = JSON.stringify({
                "eSupport_SessionID_e": lsbToken,
                "Current-Version": Constants.VERSION,
                "data": req.data,
                "domain": window.location.host.split(":")[0]
            });
            xhr.open('POST', req.url, true);
            xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
            xhr.timeout = Constants.REQUEST_TIMEOUT;
            xhr.send(data);
            xhr.onerror = function () {
                console.log("onerror sendRequest failed:" + JSON.stringify(xhr));
                if (hasRetry) {
                    if (xhr.readyState == 4 && xhr.status == 200 && xhr.statusText == "load") {
                        context.retry--;
                        console.log('retry:' + context.retry);
                        if (context.retry < 0) {
                            $('.lsb-v5-description').hide();
                            $('.lsb-requestInterrupt').show();
                            $("." + Constants.LSB_DIALOG_ID).show();
                            onFail && onFail();
                        }
                    }
                    else {
                        onFail && onFail();
                    }
                }
                else {
                    onFail && onFail();
                }
            };
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        var json = JSON.parse(xhr.responseText);
                        onSucceed && onSucceed(json);
                    }
                    if (xhr.status == 403) {
                        var json = JSON.parse(xhr.responseText);
                        // The token is invalid
                        if (json.hasOwnProperty("tokenIsValid")) {
                            _this.updateLsbToken();
                            return;
                        }
                    }
                }
            };
        };
        Core.sendRequestWithRetry = function (context, req, onSucceed, onFail, requestType) {
            if (Constants.useCors) {
                if (requestType == 'post') {
                    this.sendCorsPostRequest(this, true, req, onSucceed, onFail);
                }
                else {
                    this.sendCorsGetRequest(this, true, req, onSucceed, onFail);
                }
            }
            else {
                this.sendJsonpRequestWithRetry(this, req, onSucceed, onFail);
            }
        };
        Core.sendJsonpRequestWithRetry = function (context, req, onSucceed, onFail) {
            window["LSBV5Callback"] = function (json) {
                // The token is invalid
                if (json.hasOwnProperty("tokenIsValid")) {
                    $('.lsb-v5-description').hide();
                    $("." + Constants.LSB_DIALOG_OVERDUE_ID).show();
                    return;
                }
                onSucceed && onSucceed(json);
            };
            $.ajax({
                url: req.url,
                contentType: "application/json; charset=utf-8",
                data: {
                    "eSupport_SessionID_e": window["lsbToken"],
                    "Current-Version": Constants.VERSION,
                    "data": req.data,
                    "domain": window.location.host.split(":")[0]
                },
                dataType: "jsonp",
                jsonpCallback: "LSBV5Callback",
                error: function (xhr) {
                    console.log("sendRequest failed:" + JSON.stringify(xhr));
                    if (xhr.readyState == 4 && xhr.status == 200 && xhr.statusText == "load") {
                        context.retry--;
                        console.log('retry:' + context.retry);
                        if (context.retry < 0) {
                            $('.lsb-v5-description').hide();
                            $('.lsb-requestInterrupt').show();
                            $("." + Constants.LSB_DIALOG_ID).show();
                            onFail && onFail();
                        }
                    }
                    else {
                        onFail && onFail();
                    }
                },
                timeout: Constants.REQUEST_TIMEOUT
            });
        };
        Core.updateLsbToken = function () {
            $.get('/api/v5/lsb/token', function (res) {
                if (res) {
                    window["lsbToken"] = res;
                    var _a = __assign({}, LSBV5.Emitter.recordFire), _b = _a.name, name_1 = _b === void 0 ? '' : _b, _c = _a.params, params = _c === void 0 ? [] : _c, _d = _a.onlyOne, onlyOne = _d === void 0 ? false : _d;
                    LSBV5.Emitter.fire(name_1, params, onlyOne);
                }
            });
        };
        Core.setCurrentTaskType = function (t) {
            this.currentTaskType = t;
        };
        Core.getCurrentTaskType = function () {
            return this.currentTaskType;
        };
        Core.canRunLSB = function () {
            var result = [true, ''];
            switch (this.currentTaskType) {
                case TaskType.ADUP:
                    result = [false, Constants.MESSAGE_LSB_RUNNING_FOR_ADUP];
                    break;
                case TaskType.DETECT:
                    result = [false, Constants.MESSAGE_LSB_RUNNING_FOR_DETECT];
                    break;
                case TaskType.HWDIAG:
                    result = [false, Constants.MESSAGE_LSB_RUNNING_FOR_HWDIAG];
                    break;
                case TaskType.OSDIAG:
                    result = [false, Constants.MESSAGE_LSB_RUNNING_FOR_OSDIAG];
                    break;
                default: result = [true, ''];
            }
            return result;
        };
        Core.registerDomEvents = function () {
            var _this_1 = this;
            (function () {
                var lang = "en";
                var url = Constants.LSB_PRD_SITES.indexOf(window.location.host) > -1 ? Constants.LSB_TERMS_CONDITION_PRD : Constants.LSB_TERMS_CONDITION_TEST;
                var paths = window.location.pathname.split("/");
                if (paths.length >= 3 && paths[2].toLowerCase() == "ja") {
                    lang = "ja";
                }
                url = url.replace("{cc}", paths[1]).replace("{ll}", lang);
                $("." + Constants.LSB_INSTALL_TERMS_CONDITION_ID).attr("href", url);
                var userAgent = navigator.userAgent;
                if (!!window.ActiveXObject || "ActiveXObject" in window || userAgent.indexOf("Edge") > -1) {
                    var showALL = $("." + Constants.LSB_DIALOG_IE_TIPS_ID + " b").text().toLowerCase();
                    var tips = $("." + Constants.LSB_DIALOG_IE_TIPS_ID + " span").text().replace('{0}', "\"<b>" + showALL + "</b>\"");
                    $("." + Constants.LSB_DIALOG_IE_TIPS_ID).empty().append(tips).show();
                    $('.addin-image .ie-image').show();
                }
                else if (userAgent.indexOf("Firefox") > -1) {
                    $('.addin-image .firefox-image').show();
                }
                else {
                    // default show chrome-image
                    $('.addin-image .chrome-image').show();
                }
            })();
            $("." + Constants.LSB_DIALOG_CLOSE_ID).on('click', function () {
                LSBV5.Emitter.remove("checkAddInIsUsable", function () { }, LSBV5.Core);
                LSBV5.Core.isCallback(EventTypeEnum.CloseInstallCallBack, ComponentTypeEnum.Detect, { "LSB_DIALOG_CLOSE": "Close download dialog" });
                $("." + Constants.LSB_DIALOG_ID).hide();
                $('.lsb-v5-description').hide();
                $('.lsb-checking').show();
                $('.lsb-v5-process .process-text').text('25%');
                $('.lsb-v5-process .process-block').css('width', '25%');
                $('.lsb-add-in-tc .lsb-v5-addin-continue').show();
                $('.lsb-add-in-tc .lsb-loading-img').hide();
                $('.lsb-add-in-tc .lsb-v5-download-confirm').show();
                if (Core.VERIFY_AGREE_RULE) {
                    clearTimeout(Core.VERIFY_AGREE_RULE);
                    Core.VERIFY_AGREE_RULE = '';
                }
                if (window["l"] && window["l"].DTM && window["l"].DTM.Lmd && window["l"].DTM.Lmd.unifiedLSBCloseButtonTrack) {
                    window["l"].DTM.Lmd.unifiedLSBCloseButtonTrack();
                }
            });
            $("." + Constants.LSB_DIALOG_DOWNLOAD_ID).on('click', function () {
                if (window["l"] && window["l"].DTM && window["l"].DTM.Lmd && window["l"].DTM.Lmd.unifiedLSBAgreeTrack) {
                    window["l"].DTM.Lmd.unifiedLSBAgreeTrack();
                }
                var url = Constants.LSB_PRD_SITES.indexOf(window.location.host) > -1 ? Constants.LSB_SETUP_PATH_PRD : Constants.LSB_SETUP_PATH_TEST;
                $("." + Constants.LSB_DIALOG_DOWNLOAD_IFRAME).attr("src", url);
                $("." + Constants.LSB_DIALOG_RETRY_DOWNLOAD).attr("href", url);
                _this_1.showLSBInstructionPage();
                LSBV5.Emitter.fire("checkLsbInstall", [Core.handShakeSucceed, Core.handShakeFailed], false);
                Constants.DOWNLOAD_LSB = true;
            });
            $("." + Constants.LSB_DIALOG_RETRY_DOWNLOAD).on('click', function () {
                if (window["l"] && window["l"].DTM && window["l"].DTM.Lmd && window["l"].DTM.Lmd.unifiedLSBRetryDownloadTrack) {
                    window["l"].DTM.Lmd.unifiedLSBRetryDownloadTrack();
                }
            });
            $("." + Constants.LSB_DIALOG_CONFIRM_ID + " ." + Constants.LSB_DIALOG_DOWNLOAD_CONFIRM_ID).on('click', function () {
                if ($("." + Constants.LSB_DIALOG_CONFIRM_ID + " ." + Constants.LSB_DIALOG_DOWNLOAD_CONFIRM_ID).is(":checked")) {
                    $("." + Constants.LSB_DIALOG_CONFIRM_ID + " ." + Constants.LSB_DIALOG_DOWNLOAD_ID).removeAttr("disabled");
                    $("." + Constants.LSB_DIALOG_CONFIRM_ID + " ." + Constants.LSB_DIALOG_DOWNLOAD_ID).removeClass("disabled");
                    LSBV5.Core.isCallback(EventTypeEnum.LSBSelectAgree, ComponentTypeEnum.Detect, {});
                }
                else {
                    $("." + Constants.LSB_DIALOG_CONFIRM_ID + " ." + Constants.LSB_DIALOG_DOWNLOAD_ID).attr("disabled", "disabled");
                    $("." + Constants.LSB_DIALOG_CONFIRM_ID + " ." + Constants.LSB_DIALOG_DOWNLOAD_ID).addClass("disabled");
                }
            });
            $('.lsb-add-in-tc .lsb-download-confirm').on('click', function () {
                if ($(this).is(":checked")) {
                    $('.lsb-add-in-tc button').removeAttr('disabled');
                }
                else {
                    $('.lsb-add-in-tc button').attr('disabled', 'true');
                }
            });
            $('.lsb-add-in-tc button').on('click', function () {
                Core.addInLSB75();
            });
            $('.try-again').on('click', function () {
                $('.lsb-add-in-tc-no-launched').hide();
                $('.lsb-add-in-tc-try-again').show();
                $('.open-agreement')[0].click();
                // Core.addInLSB();
                Core.VERIFY_AGREE_RULE = setTimeout(function () {
                    if (Core.lsbClientStatus != LSBClientStatus.Installed) {
                        $('.lsb-add-in-tc').hide();
                        $('.lsb-add-in-tc-try-again').hide();
                        $('.lsb-add-in-tc-no-launched').show();
                    }
                    clearTimeout(Core.VERIFY_AGREE_RULE);
                    Core.VERIFY_AGREE_RULE = '';
                }, 10000);
            });
            $('.not-see').on('click', function () {
                // Core.useStandaloneLSB(() => {
                //     Core.setCurrentTaskType(TaskType.DETECT);
                // });
                LSBV5.Emitter.remove("checkAddInIsUsable", function () { }, LSBV5.Core);
                Core.LOCAL_PORT_ARRAY = Core.STANDALONE_PORT_ARRAY;
                $('.lsb-v5-description').hide();
                $('.lsb-v5-process').hide();
                if (Core.VERIFY_AGREE_RULE) {
                    clearTimeout(Core.VERIFY_AGREE_RULE);
                    Core.VERIFY_AGREE_RULE = '';
                }
                Core.showLSBConfirmPage();
            });
            $('.stop-journey').on('click', function () {
                LSBV5.Emitter.remove("checkAddInIsUsable", function () { }, LSBV5.Core);
                LSBV5.Core.isCallback(EventTypeEnum.CloseInstallCallBack, ComponentTypeEnum.Detect, { "LSB_DIALOG_CLOSE": "Close download dialog" });
                $("." + Constants.LSB_DIALOG_ID).hide();
                $('.lsb-v5-description').hide();
                $('.lsb-checking').show();
                $('.lsb-v5-process .process-text').text('25%');
                $('.lsb-v5-process .process-block').css('width', '25%');
                $('.lsb-add-in-tc .lsb-v5-addin-continue').show();
                $('.lsb-add-in-tc .lsb-loading-img').hide();
                $('.lsb-add-in-tc .lsb-v5-download-confirm').show();
                if (Core.VERIFY_AGREE_RULE) {
                    clearTimeout(Core.VERIFY_AGREE_RULE);
                    Core.VERIFY_AGREE_RULE = '';
                }
            });
        };
        Core.showLSBDialog = function (onSucceed) {
            if (!$("." + Constants.LSB_DIALOG_ID).length) {
                var url = Constants.LSB_INSTALL_EN;
                var paths = window.location.pathname.split("/");
                if (paths.length >= 3 && paths[2].toLowerCase() == "ja") {
                    url = Constants.LSB_INSTALL_JA;
                }
                $(document.body).append("<div class='" + Constants.LSB_DIALOG_ID + "' style=\"display: none;position: fixed;top: 0;left: 0;width: 100%;height: 100%;background: rgba(0,0,0,0.5);\"></div>");
                $("." + Constants.LSB_DIALOG_ID).load(url, function () {
                    $("." + Constants.LSB_DIALOG_ID).show(function () {
                        setTimeout(function () {
                            Core.registerDomEvents();
                            Core.showLSBCheckPage();
                            onSucceed && onSucceed();
                        }, 1000);
                    });
                });
            }
            else {
                $("." + Constants.LSB_DIALOG_ID).show();
                Core.showLSBCheckPage();
                onSucceed && onSucceed();
            }
        };
        Core.closeLSBDialog = function () {
            $("." + Constants.LSB_DIALOG_ID).hide();
        };
        Core.showLSBCheckPage = function () {
            $('.lsb-v5-description').hide();
            $("." + Constants.LSB_DIALOG_CHECK_ID).show();
            $("." + Constants.LSB_DIALOG_CONFIRM_ID).hide();
            $("." + Constants.LSB_DIALOG_INSTRUCTION_ID).hide();
        };
        Core.closeLSBCheckPage = function () {
            $("." + Constants.LSB_DIALOG_CHECK_ID).hide();
        };
        Core.showLSBConfirmPage = function () {
            $("." + Constants.LSB_DIALOG_CHECK_ID).hide();
            $("." + Constants.LSB_DIALOG_CONFIRM_ID).show();
            $("." + Constants.LSB_DIALOG_INSTRUCTION_ID).hide();
        };
        Core.closeLSBConfirmPage = function () {
            $("." + Constants.LSB_DIALOG_CONFIRM_ID).hide();
        };
        Core.showLSBInstructionPage = function () {
            $("." + Constants.LSB_DIALOG_CHECK_ID).hide();
            $("." + Constants.LSB_DIALOG_CONFIRM_ID).hide();
            $("." + Constants.LSB_DIALOG_INSTRUCTION_ID).show();
        };
        Core.closeLSBInstructionPage = function () {
            $("." + Constants.LSB_DIALOG_INSTRUCTION_ID).hide();
        };
        Core.currentTaskType = TaskType.IDLE;
        Core.STANDALONE_PORT_ARRAY = [50128, 50129, 50130];
        Core.ADD_IN_PORT_ARRAY = [50131];
        Core.LOCAL_PORT_ARRAY = Core.STANDALONE_PORT_ARRAY;
        Core.LOCAL_PORT_INDEX = 0;
        Core.lsbClientStatus = LSBClientStatus.Unknown;
        Core.VERIFY_AGREE_RULE = '';
        return Core;
    }());
    LSBV5.Core = Core;
    var Detect = /** @class */ (function (_super) {
        __extends(Detect, _super);
        function Detect() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Detect.setExternalCallback = function (onSucceed) {
            Detect.externalCallBack = onSucceed;
        };
        Detect.getExternalCallback = function () {
            return Detect.externalCallBack;
        };
        Detect.registerEmitter = function () {
            _super.registerEmitter.call(this);
            LSBV5.Emitter.register("lsbDetect", LSBV5.Detect.requestDetect, LSBV5.Detect);
        };
        Detect.run = function (onSucceed, onFail) {
            var _this_1 = this;
            var sn = Cookies.get("SN");
            var mtm = Cookies.get("MTM");
            var isLenovo = Cookies.get("IsLenovo");
            if (sn && mtm && isLenovo) {
                var detectedData = {
                    SN: sn,
                    MTM: mtm,
                    IsLenovo: isLenovo
                };
                onSucceed && onSucceed(detectedData);
                window["forceUseStandalone"] = false;
                return;
            }
            Detect.setExternalCallback(onSucceed);
            LSBV5.Detect.registerEmitter();
            var bRun = _super.canRunLSB.call(this);
            if (bRun[0] === true) {
                _super.checkLsbIsRunning.call(this, function () {
                    _super.setCurrentTaskType.call(_this_1, TaskType.DETECT);
                });
            }
            else {
                onFail && onFail(bRun[1]);
            }
        };
        Detect.detectSucceed = function (data) {
            Core.setCurrentTaskType(TaskType.IDLE);
            Core.closeLSBDialog();
            var callBack = Detect.getExternalCallback();
            var detectedData = {
                SN: "",
                MTM: "",
                IsLenovo: "1"
            };
            if (data.hasOwnProperty("DetectData") && data["DetectData"].hasOwnProperty("Sn") && data["DetectData"].hasOwnProperty("Mtm")) {
                detectedData.SN = data["DetectData"]["Sn"];
                detectedData.MTM = data["DetectData"]["Mtm"];
                Cookies.set("SN", detectedData.SN, { expires: Constants.COOKIE_EXPIRATION_DAYS });
                Cookies.set("MTM", detectedData.MTM, { expires: Constants.COOKIE_EXPIRATION_DAYS });
                if (data["DetectData"]["Exception"] === 1) {
                    detectedData.IsLenovo = "0";
                }
                Cookies.set("IsLenovo", detectedData.IsLenovo, { expires: Constants.COOKIE_EXPIRATION_DAYS });
            }
            else {
                //todo: 
            }
            callBack && callBack(detectedData);
        };
        Detect.requestDetect = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "Detect");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        return Detect;
    }(Core));
    LSBV5.Detect = Detect;
    var Adup = /** @class */ (function (_super) {
        __extends(Adup, _super);
        function Adup() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Adup.registerEmitter = function () {
            _super.registerEmitter.call(this);
            LSBV5.Emitter.register("scanStart", LSBV5.Adup.adupStartScan, LSBV5.Adup);
            LSBV5.Emitter.register("scanProcessBar", LSBV5.Adup.requestTvsuProcess, LSBV5.Adup);
            LSBV5.Emitter.register("tvsuInstall", LSBV5.Adup.requestInstTvsu, LSBV5.Adup);
            LSBV5.Emitter.register("tvsuDownLoadSize", LSBV5.Adup.requestTvsuGetDownloadSize, LSBV5.Adup);
            LSBV5.Emitter.register("adupCurrentStatus", LSBV5.Adup.requestCurrentStatus, LSBV5.Adup);
            LSBV5.Emitter.register("adupTvsuInsBeforeCancel", LSBV5.Adup.requestInstTvsuCancelAtStart, LSBV5.Adup);
            LSBV5.Emitter.register("adupTvsuCancel", LSBV5.Adup.requestInstTvsuCancel, LSBV5.Adup);
            LSBV5.Emitter.register("adupScanCancel", LSBV5.Adup.requestScanCancel, LSBV5.Adup);
            LSBV5.Emitter.register("adupDriverInstall", LSBV5.Adup.requestInstall, LSBV5.Adup);
            LSBV5.Emitter.register("adupInstallStatus", LSBV5.Adup.requestInstallStatus, LSBV5.Adup);
        };
        Adup.runDownloadCancel = function () {
            LSBV5.Emitter.fire("adupTvsuInsBeforeCancel", [Adup.adupTvsuInsBeforeCancelSuccess, Adup.adupTvsuInsBeforeCancelFailure]);
        };
        Adup.runInstallCancel = function () {
            LSBV5.Emitter.fire("adupTvsuCancel", [Adup.adupTvsuCancelSuccess, Adup.adupTvsuCancelFailure]);
        };
        Adup.runScanCancel = function () {
            LSBV5.Emitter.fire("adupScanCancel", [Adup.adupScanCancelSuccess, Adup.adupScanCancelFailure]);
        };
        Adup.runInstallPackage = function (data) {
            Adup.updateAction = 0;
            Adup.downloadNoMovingSeconds = 0;
            Adup.downloadOngoingId = 0;
            Adup.installNoMovingSeconds = 0;
            Adup.installOngoingId = 0;
            LSBV5.Emitter.fire("adupDriverInstall", [Adup.adupDriverInstallSuccess, '', data], false);
        };
        Adup.runScan = function () {
            Adup.scanNoMovingSeconds = 0;
            Adup.scanProgress = 0;
            LSBV5.Emitter.fire("scanStart", [Adup.scanStartSuccess, Adup.scanStartFailure]);
        };
        Adup.runInstallTvsu = function () {
            LSBV5.Emitter.fire("tvsuInstall", [Adup.tvsuInstallSuccess, Adup.tvsuInstallFailure]);
        };
        Adup.tvsuInstallSuccess = function (data) {
            console.log("tvsuInstallSuccess:" + JSON.stringify(data));
            var response = data;
            if (response.Exception != 0) {
                console.log("tvsuInstallSuccess Install failed!");
            }
            else {
                LSBV5.Emitter.fire("tvsuDownLoadSize", [Adup.tvsuDownLoadSizeSuccess, Adup.tvsuDownLoadSizeFailure], true);
            }
        };
        Adup.tvsuInstallFailure = function () {
            console.log("tvsuInstallFailure");
        };
        Adup.tvsuDownLoadSizeSuccess = function (data) {
            console.log("tvsuDownLoadSizeSuccess" + JSON.stringify(data));
            LSBV5.Adup.setCurrentRunState(ComponentTypeEnum.Adup, LsbRunState.TvsuInProcess, LsbInstallRunAction.AdupScan);
            LSBV5.Core.isCallback(EventTypeEnum.DownloadTVSUStatus, ComponentTypeEnum.Adup, data);
            var response = data;
            var flag = response.Data.length && response.Data[0].totalfilesize == response.Data[0].downloadedsize ? true : false;
            if (flag) {
                LSBV5.Emitter.reRegister("tvsuDownLoadSize", LSBV5.Adup.requestTvsuGetDownloadSize, LSBV5.Adup);
                LSBV5.Emitter.fire("adupCurrentStatus", [Adup.adupCurrentStatusSuccess, Adup.adupCurrentStatusFailure], true);
            }
        };
        Adup.tvsuDownLoadSizeFailure = function () {
            console.log("tvsuInstallFailure");
            var data = "";
            LSBV5.Core.isCallback(EventTypeEnum.DownloadTVSUPause, ComponentTypeEnum.Adup, data);
        };
        Adup.adupCurrentStatusSuccess = function (data) {
            console.log("adupCurrentStatusSuccess:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.InstallTVSUInstalling, ComponentTypeEnum.Adup, data);
            var response = data;
            if (response.progressStatus == 6) {
                LSBV5.Emitter.reRegister("adupCurrentStatus", LSBV5.Adup.requestCurrentStatus, LSBV5.Adup);
                $(".AdupInstallDiv").css("display", "block");
                $(".tvsuInstallDiv").css("display", "none");
                LSBV5.Adup.setCurrentRunState(ComponentTypeEnum.Adup, LsbRunState.ScanInProcess, LsbInstallRunAction.AdupScan);
                LSBV5.Emitter.fire("scanProcessBar", [Adup.scanProcessBarSuccess, Adup.scanProcessBarFailure], true);
            }
            else if (response.progressStatus == LSBV5.ADUPExceptionEnum.ErrorDownloadTVSU) {
                LSBV5.Emitter.reRegister("adupCurrentStatus", LSBV5.Adup.requestCurrentStatus, LSBV5.Adup);
                LSBV5.Adup.setCurrentRunState(ComponentTypeEnum.Adup, LsbRunState.None, LsbInstallRunAction.AdupScan);
            }
            else if (response.progressStatus == LSBV5.ADUPExceptionEnum.ErrorInstallTVSU) {
                LSBV5.Emitter.reRegister("adupCurrentStatus", LSBV5.Adup.requestCurrentStatus, LSBV5.Adup);
                LSBV5.Adup.setCurrentRunState(ComponentTypeEnum.Adup, LsbRunState.None, LsbInstallRunAction.AdupScan);
            }
        };
        Adup.adupCurrentStatusFailure = function () {
            console.log("adupCurrentStatusFailure");
        };
        Adup.scanStartSuccess = function (data) {
            LSBV5.Emitter.resetRunStatus("scanStart");
            console.log("scanStartSuccess:" + JSON.stringify(data));
            var response = data;
            if (response.Exception == LSBV5.ExceptionEnum.None) {
                $(".AdupInstallDiv").css("display", "block");
                LSBV5.Adup.setCurrentRunState(ComponentTypeEnum.Adup, LsbRunState.ScanInProcess, LsbInstallRunAction.AdupScan);
                LSBV5.Emitter.fire("scanProcessBar", [Adup.scanProcessBarSuccess, Adup.scanProcessBarFailure], true);
                LSBV5.Core.isCallback(EventTypeEnum.ADUPDetectInfoSuccess, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.SystemNotSupport) {
                LSBV5.Core.isCallback(EventTypeEnum.SystemNotSupport, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.NoTVSU) {
                LSBV5.Core.isCallback(EventTypeEnum.NoTVSU, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.ErrorLaunchTVSU) {
                LSBV5.Core.isCallback(EventTypeEnum.ErrorLaunchTVSU, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.ErrorDownloadTVSU) {
                LSBV5.Core.isCallback(EventTypeEnum.ErrorDownloadTVSU, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.UnhandledException) {
                LSBV5.Core.isCallback(EventTypeEnum.UnhandledException, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.WrongRequest) {
                LSBV5.Core.isCallback(EventTypeEnum.WrongRequest, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.NotLenovo) {
                LSBV5.Core.isCallback(EventTypeEnum.NotLenovo, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.LowVersion) {
                console.log("LSBV5.ExceptionEnum.LowVersion:Please install the Tvsu.");
                LSBV5.Core.isCallback(EventTypeEnum.LowVersion, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.Waiting) {
                LSBV5.Core.isCallback(EventTypeEnum.Waiting, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.TVSUUpdateFailed) {
                LSBV5.Core.isCallback(EventTypeEnum.TVSUUpdateFailed, ComponentTypeEnum.Adup, data);
            }
            else if (response.returnCode == 3 && response.progressStatus == 2) {
                $(".AdupInstallDiv").css("display", "block");
                LSBV5.Adup.setCurrentRunState(ComponentTypeEnum.Adup, LsbRunState.ScanInProcess, LsbInstallRunAction.AdupScan);
                LSBV5.Emitter.fire("scanProcessBar", [Adup.scanProcessBarSuccess, Adup.scanProcessBarFailure], true);
                LSBV5.Core.isCallback(EventTypeEnum.ADUPDetectInfoSuccess, ComponentTypeEnum.Adup, data);
            }
            else if (response.Exception == LSBV5.ExceptionEnum.VantageIsRunning) {
                LSBV5.Core.isCallback(EventTypeEnum.VantageIsRunning, ComponentTypeEnum.Adup, data);
            }
        };
        Adup.scanStartFailure = function (data) {
            console.log("scanStartFailure:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.ADUPFailed, ComponentTypeEnum.Adup, data);
            Adup.lsbCallFinishOrException();
        };
        Adup.scanProcessBarSuccess = function (data) {
            console.log("scanProcessBarSuccess:" + JSON.stringify(data));
            if (Adup.scanProgress == data.Progress) {
                Adup.scanNoMovingSeconds += Constants.INTERVAL_TICKS;
            }
            else {
                Adup.scanNoMovingSeconds = 0;
            }
            console.log("scanNoMovingSeconds", Adup.scanNoMovingSeconds);
            if (Adup.scanNoMovingSeconds > (30 * 60 * 1000)) {
                data.Exception = ExceptionEnum.TVSUUpdateFailed;
                data.Progress = -1;
            }
            Adup.scanProgress = data.Progress;
            var response = data;
            if (response.Exception == LSBV5.ExceptionEnum.ErrorLaunchTVSU) {
                Adup.lsbCallFinishOrException();
                LSBV5.Core.isCallback(EventTypeEnum.ErrorLaunchTVSU, ComponentTypeEnum.Adup, data);
            }
            else {
                LSBV5.Core.isCallback(EventTypeEnum.ADUPStatusSuccess, ComponentTypeEnum.Adup, data);
            }
            if (response.Progress == 100 && response.IsSearchList) {
                LSBV5.Emitter.reRegister("scanProcessBar", LSBV5.Adup.requestTvsuProcess, LSBV5.Adup);
            }
        };
        Adup.scanProcessBarFailure = function (data) {
            console.log("scanProcessBarFailure:" + JSON.stringify(data));
            Adup.lsbCallFinishOrException();
            LSBV5.Core.isCallback(EventTypeEnum.ADUPStatusFailed, ComponentTypeEnum.Adup, data);
        };
        Adup.adupTvsuInsBeforeCancelSuccess = function (data) {
            console.log("adupTvsuInsBeforeCancelSuccess:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.DownloadTVSUCancel, ComponentTypeEnum.Adup, data);
            Adup.lsbCallFinishOrException();
        };
        Adup.adupTvsuInsBeforeCancelFailure = function (data) {
            console.log("adupTvsuInsBeforeCancelFailure:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.DownloadTVSUCancelFailed, ComponentTypeEnum.Adup, data);
            Adup.lsbCallFinishOrException();
        };
        Adup.adupTvsuCancelSuccess = function (data) {
            console.log("adupTvsuCancelSuccess:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.InstallTVSUCancelled, ComponentTypeEnum.Adup, data);
            Adup.lsbCallFinishOrException();
        };
        Adup.adupTvsuCancelFailure = function (data) {
            console.log("adupTvsuCancelFailure:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.InstallTVSUCancelled, ComponentTypeEnum.Adup, data);
            Adup.lsbCallFinishOrException();
        };
        Adup.adupScanCancelSuccess = function (data) {
            console.log("adupTvsuCancelSuccess:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.ADUPCancelSuccess, ComponentTypeEnum.Adup, data);
            Adup.lsbCallFinishOrException();
        };
        Adup.adupScanCancelFailure = function (data) {
            console.log("adupScanCancelFailure:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.ADUPCancelFailed, ComponentTypeEnum.Adup, data);
            Adup.lsbCallFinishOrException();
        };
        Adup.adupDriverInstallSuccess = function (data) {
            console.log("adupDriverInstallSuccess:" + JSON.stringify(data));
            var response = data;
            if (response.hasOwnProperty('Exception')) {
                if (response.Exception == ADUPExceptionEnum.None) {
                    LSBV5.Adup.setCurrentRunState(ComponentTypeEnum.Adup, LsbRunState.AdupInProcess, LsbInstallRunAction.AdupScan);
                    LSBV5.Emitter.fire("adupInstallStatus", [Adup.adupInstallStatusSuccess, Adup.adupInstallStatusFailure], true);
                }
                else if (response.Exception == ADUPExceptionEnum.VantageIsRunning) {
                    LSBV5.Core.isCallback(EventTypeEnum.VantageIsRunning, ComponentTypeEnum.Adup, data);
                }
                else {
                    LSBV5.Core.isCallback(EventTypeEnum.ADUPInstallPackageFailed, ComponentTypeEnum.Adup, data);
                }
            }
        };
        Adup.adupDriverInstallFailure = function (data) {
            console.log("adupDriverInstallFailure:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.ADUPInstallPackageFailed, ComponentTypeEnum.Adup, data);
            Adup.lsbCallFinishOrException();
        };
        Adup.adupInstallStatusSuccess = function (data) {
            console.log("adupInstallStatusSuccess:" + JSON.stringify(data));
            if (data.Action == InstallPackageActionEnum.Downloading) {
                if (Adup.downloadOngoingId == data.OngoingId) {
                    Adup.downloadNoMovingSeconds += Constants.INTERVAL_TICKS;
                }
                Adup.downloadOngoingId = data.OngoingId;
                console.log("downloadNoMovingSeconds", Adup.downloadNoMovingSeconds);
            }
            else if (data.Action == InstallPackageActionEnum.Installing) {
                if (Adup.installOngoingId == data.OngoingId) {
                    Adup.installNoMovingSeconds += Constants.INTERVAL_TICKS;
                }
                Adup.installOngoingId = data.OngoingId;
                console.log("installNoMovingSeconds", Adup.installNoMovingSeconds);
            }
            if (Adup.downloadNoMovingSeconds > (15 * 60 * 1000) || Adup.installNoMovingSeconds > (15 * 60 * 1000)) {
                data.Action = InstallPackageActionEnum.Done;
                if (data.Packages) {
                    for (var i = 0; i < data.Packages.length; i++) {
                        var packageItem = data.Packages[i];
                        if (!packageItem.Status) {
                            packageItem.Status = LSBV5.InstallPackageStatusEnum.install_fail;
                        }
                    }
                }
            }
            var response = data;
            if (response.Confirmation == "No") {
                LSBV5.Core.isCallback(EventTypeEnum.ADUPInstallConfirmNo, ComponentTypeEnum.Adup, data);
                Adup.lsbCallFinishOrException();
                return;
            }
            if (response.Exception == ADUPExceptionEnum.None) {
                LSBV5.Core.isCallback(EventTypeEnum.ADUPInstallStatus, ComponentTypeEnum.Adup, data);
                if (response.Action == InstallPackageActionEnum.Done) {
                    console.log("Adup install driver success.");
                    LSBV5.Core.isCallback(EventTypeEnum.ADUPInstallPackageProcessFinished, ComponentTypeEnum.Adup, data);
                    Adup.lsbCallFinishOrException();
                }
            }
            else {
                LSBV5.Core.isCallback(EventTypeEnum.ADUPInstallPackageFailed, ComponentTypeEnum.Adup, data);
            }
        };
        Adup.adupInstallStatusFailure = function (data) {
            console.log("adupInstallStatusFailure:" + JSON.stringify(data));
            LSBV5.Core.isCallback(EventTypeEnum.ADUPInstallStatusFailed, ComponentTypeEnum.Adup, data);
            Adup.lsbCallFinishOrException();
        };
        Adup.lsbCallFinishOrException = function () {
            LSBV5.Core.removeCurrentRunState();
            LSBV5.Emitter.removeAll(LSBV5.Adup);
            LSBV5.Adup.registerEmitter();
        };
        Adup.adupDriversInstallStatusSuccess = function (data) {
            console.log("adupDriversInstallStatusSuccess:" + JSON.stringify(data));
        };
        Adup.adupStartScan = function (onSucceed, onFail) {
            var StartScanCmd = _super.getRequestURL.call(this, "Adup5");
            if (StartScanCmd) {
                var params = JSON.stringify({
                    TvsuVersion: Adup._tvsuVersion
                });
                var req = {
                    url: StartScanCmd,
                    data: params
                };
                _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
            }
            else {
                //todo: 
            }
        };
        Adup.requestCurrentStatus = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupCurrentStatus");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail);
        };
        Adup.requestTvsuGetDownloadSize = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupTvsuGetDownloadSize");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail);
        };
        Adup.requestTvsuInstallStatus = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupTvsuInstallStatus");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail);
        };
        Adup.requestTvsuProcess = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupTvsuProcessBar");
            var req = {
                url: url
            };
            _super.sendRequestWithRetry.call(this, this, req, onSucceed, onFail);
        };
        Adup.requestInstallStatus = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupInstallStatus");
            var req = {
                url: url
            };
            _super.sendRequestWithRetry.call(this, this, req, onSucceed, onFail);
        };
        Adup.requestDriversInstallStatus = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupDriversInstallStatus");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail);
        };
        Adup.requestInstTvsuCancelAtStart = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupInstTvsuCancelAtStart");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        Adup.requestInstTvsu = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupInstTvsu");
            var sendInfoArray = [];
            var tvsuDLInfo = new LSBV5.DownloadFilesInfo();
            tvsuDLInfo.FileId = this._tvsuFileId;
            var fileName = this._tvsuUrl.substring(this._tvsuUrl.lastIndexOf("/") + 1, this._tvsuUrl.length);
            tvsuDLInfo.Name = /\.exe$/.test(fileName) ? fileName : fileName + ".exe";
            tvsuDLInfo.DSName = "TVSU";
            tvsuDLInfo.Url = this._tvsuUrl;
            tvsuDLInfo.Version = this._tvsuVersion;
            sendInfoArray.push(tvsuDLInfo);
            var params = JSON.stringify(sendInfoArray);
            var req = {
                url: url,
                method: 'post',
                data: params
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        Adup.requestInstTvsuCancel = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupInstTvsuCancel");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        Adup.requestScanCancel = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "AdupScanCancel");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        Adup.requestInstall = function (onSucceed, onFail, data) {
            var url = _super.getRequestURL.call(this, "AdupInstall");
            var req = {
                url: url,
                method: 'post',
                data: data
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        Adup._tvsuVersion = '5.07.0131';
        Adup._tvsuUrl = "https://download.lenovo.com/tvsupackage";
        Adup._tvsuFileId = 'tvsu';
        Adup.scanProgress = 0;
        Adup.scanNoMovingSeconds = 0;
        Adup.updateAction = 0;
        Adup.downloadOngoingId = 0;
        Adup.downloadNoMovingSeconds = 0;
        Adup.installOngoingId = 0;
        Adup.installNoMovingSeconds = 0;
        return Adup;
    }(Core));
    LSBV5.Adup = Adup;
    var HwDiag = /** @class */ (function (_super) {
        __extends(HwDiag, _super);
        function HwDiag() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        HwDiag.reset = function () {
            LSBV5.Core.removeCurrentRunState();
            LSBV5.Emitter.removeAll(LSBV5.HwDiag);
            LSBV5.HwDiag.registerEmitter();
        };
        HwDiag.cancelSucceed = function (data) {
            _super.outLogger.call(this, "cancelSucceed", data);
            _super.isCallback.call(this, EventTypeEnum.DiagCancelSuccess, ComponentTypeEnum.SysDiag, data);
            HwDiag.reset();
        };
        HwDiag.cancelFailed = function (data) {
            _super.outLogger.call(this, "cancelFailed", data);
            _super.isCallback.call(this, EventTypeEnum.DiagCancelFailed, ComponentTypeEnum.SysDiag, data);
            HwDiag.reset();
        };
        HwDiag.getScanProcess = function (data) {
            _super.outLogger.call(this, "getScanProcess", data);
            HwDiag.scanProgress = 0;
            HwDiag.scanNoMovingSeconds = 0;
            LSBV5.Core.setCurrentRunState(ComponentTypeEnum.SysDiag, LsbRunState.SysDiagInProcess, LsbInstallRunAction.SysDiag);
            LSBV5.Emitter.fire("getSysDiagScanProcessBar", [HwDiag.getScanProcessSucceed, HwDiag.getScanProcessFailed], true);
        };
        HwDiag.getScanProcessSucceed = function (data) {
            _super.outLogger.call(this, "getScanProcessSucceed", data);
            if (data.Inited) {
                if (HwDiag.scanProgress == data.OverallProgress) {
                    HwDiag.scanNoMovingSeconds += Constants.INTERVAL_TICKS;
                }
                else {
                    HwDiag.scanNoMovingSeconds = 0;
                }
                console.log("scanNoMovingSeconds", HwDiag.scanNoMovingSeconds);
                if (HwDiag.scanNoMovingSeconds > HwDiag.suspendsTimeout) {
                    data.Suspends = true;
                }
                HwDiag.scanProgress = data.OverallProgress;
            }
            if (data.Exception == 0) {
                if (data && data.Modules && data.Modules.length > 0) {
                    var notExitMoulds = data.Modules.filter(function (i) { return i.Devices.length == 0; });
                    if ((notExitMoulds.length == data.Modules.length) && data.OverallProgress == 100 && data.Inited) {
                        data.Complete = true;
                    }
                    _super.isCallback.call(this, EventTypeEnum.DiagStatusSuccess, ComponentTypeEnum.SysDiag, data);
                }
                else {
                    _super.isCallback.call(this, EventTypeEnum.Waiting, ComponentTypeEnum.SysDiag, data);
                }
                if (data && data.OverallProgress == 100 && data.Complete) {
                    _super.isCallback.call(this, EventTypeEnum.DiagSuccess, ComponentTypeEnum.SysDiag, data);
                    HwDiag.reset();
                }
                else if (data.Exception != LSBV5.SysDiagExceptionEnum.None && data.Exception != LSBV5.SysDiagExceptionEnum.Wait) {
                    _super.isCallback.call(this, EventTypeEnum.DiagFailed, ComponentTypeEnum.SysDiag, data);
                    HwDiag.reset();
                }
                if (HwDiag.LscWasInstalled == false) {
                    HwDiag.LscWasInstalled = true;
                    LSBV5.Core.isCallback(LSBV5.EventTypeEnum.InstallTVSUSuccess, LSBV5.ComponentTypeEnum.SysDiag, data);
                }
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.SystemNotSupport) {
                LSBV5.Core.isCallback(EventTypeEnum.SystemNotSupport, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.NoLSC) {
                HwDiag.LscWasInstalled = false;
                LSBV5.Core.isCallback(EventTypeEnum.NoLSC, ComponentTypeEnum.SysDiag, data);
                LSBV5.Core.isCallback(EventTypeEnum.Waiting, ComponentTypeEnum.SysDiag, data);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.ErrorLaunchLSC) {
                LSBV5.Core.isCallback(EventTypeEnum.ErrorLaunchLSC, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.ErrorDownloadLSC) {
                LSBV5.Core.isCallback(EventTypeEnum.InstallLSCFailed, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.LSCNotLaunch) {
                LSBV5.Core.isCallback(EventTypeEnum.LSCNotLaunch, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.UnhandledException) {
                LSBV5.Core.isCallback(EventTypeEnum.UnhandledException, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.WrongRequest) {
                LSBV5.Core.isCallback(EventTypeEnum.WrongRequest, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.NotLenovo) {
                LSBV5.Core.isCallback(EventTypeEnum.NotLenovo, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.Wait) {
                LSBV5.Core.isCallback(EventTypeEnum.Waiting, ComponentTypeEnum.SysDiag, data);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.ModuleNotSupport) {
                LSBV5.Core.isCallback(EventTypeEnum.ModuleNotSupport, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.NoWebAPIData) {
                LSBV5.Core.isCallback(EventTypeEnum.NoWebAPIData, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.WrongWebAPIData) {
                LSBV5.Core.isCallback(EventTypeEnum.WrongWebAPIData, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
            else if (data.Exception == LSBV5.SysDiagExceptionEnum.VantageIsRunning) {
                LSBV5.Core.isCallback(EventTypeEnum.VantageIsRunning, ComponentTypeEnum.SysDiag, data);
                LSBV5.Emitter.reRegister("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            }
        };
        HwDiag.getScanProcessFailed = function (data) {
            _super.outLogger.call(this, "getScanProcessFailed", data);
        };
        HwDiag.instLscSucceed = function (data) {
            _super.outLogger.call(this, "instLscSucceed", data);
            LSBV5.Core.isCallback(EventTypeEnum.InstallLSCInstalling, ComponentTypeEnum.SysDiag, data);
            setTimeout(function () {
                LSBV5.Emitter.fire("getSysDiagScanProcessBar", [HwDiag.getScanProcessSucceed, HwDiag.getScanProcessFailed], true);
            }, 40000);
        };
        HwDiag.instLscFailed = function (data) {
            LSBV5.Core.isCallback(EventTypeEnum.InstallLSCFailed, ComponentTypeEnum.SysDiag, data);
            _super.outLogger.call(this, "instLscFailed", data);
        };
        HwDiag.customScanSucceed = function (data) {
            _super.outLogger.call(this, "customScanSucceed", data);
            HwDiag.getScanProcess(data);
        };
        HwDiag.customScanFailed = function (data) {
            _super.outLogger.call(this, "customScanFailed", data);
        };
        HwDiag.simpleScanSucceed = function (data) {
            _super.outLogger.call(this, "simpleScanSucceed", data);
            HwDiag.getScanProcess(data);
        };
        HwDiag.simpleScanFailed = function (data) {
            _super.outLogger.call(this, "simpleScanFailed", data);
        };
        // private static checkInstallStatusSucceed(data): void {
        //     super.outLogger("checkInstallStatusSucceed", data);
        //     super.isCallback(EventTypeEnum.RedirectSuccess, ComponentTypeEnum.SysDiag, data);
        // }
        // private static checkInstallStatusFailed(data): void {
        //     super.outLogger("checkInstallStatusFailed", data);
        //     super.isCallback(EventTypeEnum.RedirectFailed, ComponentTypeEnum.SysDiag, data);
        // }
        HwDiag.registerEmitter = function () {
            _super.registerEmitter.call(this);
            LSBV5.Emitter.register("startSimpleSysDiagScan", LSBV5.HwDiag.requestSimpleScan, LSBV5.HwDiag);
            LSBV5.Emitter.register("startCustomSysDiagScan", LSBV5.HwDiag.requestCustomScan, LSBV5.HwDiag);
            LSBV5.Emitter.register("getSysDiagScanProcessBar", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
            LSBV5.Emitter.register("sysDiagCancel", LSBV5.HwDiag.requestCancel, LSBV5.HwDiag);
            LSBV5.Emitter.register("sysDiagInstLsc", LSBV5.HwDiag.requestInstLsc, LSBV5.HwDiag);
            //LSBV5.Emitter.register("getSysDiagRunState", LSBV5.HwDiag.requestRunState, LSBV5.HwDiag);
        };
        HwDiag.run = function (data) {
            var CurrentRunItem = Core.getCurrentRunState();
            if (CurrentRunItem.ActionName && CurrentRunItem.ActionName != ComponentTypeEnum.SysDiag) {
                LSBV5.Core.isCallback(EventTypeEnum.OtherModuleWasRunning, ComponentTypeEnum.SysDiag, data);
            }
            else {
                if (data) {
                    LSBV5.Emitter.fire("startCustomSysDiagScan", [HwDiag.customScanSucceed, HwDiag.customScanFailed, data]);
                }
                else {
                    LSBV5.Emitter.fire("startSimpleSysDiagScan", [HwDiag.simpleScanSucceed, HwDiag.simpleScanFailed]);
                }
            }
        };
        HwDiag.cancel = function () {
            LSBV5.Emitter.fire("sysDiagCancel", [HwDiag.cancelSucceed, HwDiag.cancelFailed]);
        };
        HwDiag.requestSimpleScan = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "SysDiag");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed);
        };
        HwDiag.requestCustomScan = function (onSucceed, onFail, params) {
            var url = _super.getRequestURL.call(this, "ModuleBasedDiag");
            var req = {
                url: url,
                method: 'post',
                data: params
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        HwDiag.requestScanProcess = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "SysDiagStatus");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed);
        };
        HwDiag.requestInstLscCancelAtStart = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "SysDiagInstLscCancelAtStart");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed);
        };
        HwDiag.requestInstLscCancel = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "SysDiagInstLscCancel");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed);
        };
        HwDiag.requestCancel = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "SysDiagCancel");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        HwDiag.requestInstLsc = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "SysDiagInstLsc");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed);
        };
        HwDiag.requestRunState = function (onSucceed, onFail) {
            var url = _super.getRequestURL.call(this, "GetSysDiagRunState");
            var req = {
                url: url
            };
            _super.sendRequest.call(this, req, onSucceed, onFail);
        };
        HwDiag.LscWasInstalled = true;
        HwDiag.scanProgress = 0;
        HwDiag.scanNoMovingSeconds = 0;
        HwDiag.suspendsTimeout = 15 * 60 * 1000;
        return HwDiag;
    }(Core));
    LSBV5.HwDiag = HwDiag;
    var OsDiag = /** @class */ (function (_super) {
        __extends(OsDiag, _super);
        function OsDiag() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OsDiag.scanSucceed = function (data) {
            Core.outLogger("scanSucceed", data);
            if (data.Exception == 0) {
                _super.isCallback.call(this, EventTypeEnum.OSDiagScanSuccess, ComponentTypeEnum.OsDiag, data);
            }
            else {
                _super.isCallback.call(this, EventTypeEnum.OSDiagScanFailed, ComponentTypeEnum.OsDiag, data);
            }
            OsDiag.reset();
        };
        OsDiag.scanFailed = function (data) {
            Core.outLogger("scanFailed", data);
            _super.isCallback.call(this, EventTypeEnum.OSDiagScanFailed, ComponentTypeEnum.OsDiag, data);
            OsDiag.reset();
        };
        OsDiag.runByUrlSucceed = function (data) {
            Core.outLogger("runByUrlSucceed", data);
            if (data.Exception == 0) {
                _super.isCallback.call(this, EventTypeEnum.OSDiagRunSuccess, ComponentTypeEnum.OsDiag, data);
            }
            else {
                _super.isCallback.call(this, EventTypeEnum.OSDiagRunFailed, ComponentTypeEnum.OsDiag, data);
            }
            OsDiag.reset();
        };
        OsDiag.runByUrlFailed = function (data) {
            Core.outLogger("runByUrlFailed", data);
            _super.isCallback.call(this, EventTypeEnum.OSDiagRunFailed, ComponentTypeEnum.OsDiag, data);
            OsDiag.reset();
        };
        OsDiag.runByIdSucceed = function (data) {
            Core.outLogger("runByIdSucceed", data);
            if (data.Exception == 0) {
                _super.isCallback.call(this, EventTypeEnum.OSDiagRunByIdSuccess, ComponentTypeEnum.OsDiag, data);
            }
            else if (data.Exception == 6) {
                _super.isCallback.call(this, EventTypeEnum.UnhandledException, ComponentTypeEnum.OsDiag, data);
            }
            else {
                _super.isCallback.call(this, EventTypeEnum.OSDiagRunByIdFailed, ComponentTypeEnum.OsDiag, data);
            }
            OsDiag.reset();
        };
        OsDiag.runByIdFailed = function (data) {
            _super.isCallback.call(this, EventTypeEnum.OSDiagRunByIdFailed, ComponentTypeEnum.OsDiag, data);
            Core.outLogger("runByIdFailed", data);
            OsDiag.reset();
        };
        OsDiag.reset = function () {
            LSBV5.Core.removeCurrentRunState();
            LSBV5.Emitter.removeAll(LSBV5.OsDiag);
            LSBV5.OsDiag.registerEmitter();
        };
        OsDiag.registerEmitter = function () {
            _super.registerEmitter.call(this);
            LSBV5.Emitter.register(Constants.OS_DIAG_RUN_BY_URL, LSBV5.OsDiag.requestRunByUrl, LSBV5.OsDiag);
            LSBV5.Emitter.register(Constants.OS_DIAG_SCAN, LSBV5.OsDiag.requestScan, LSBV5.OsDiag);
            LSBV5.Emitter.register(Constants.OS_DIAG_RUN_BY_ID, LSBV5.OsDiag.requestRunById, LSBV5.OsDiag);
            LSBV5.Emitter.register(Constants.OS_DIAG_RUN_BY_NAME, LSBV5.OsDiag.requestRunByName, LSBV5.OsDiag);
        };
        OsDiag.runByUrl = function (data) {
            LSBV5.Emitter.fire(Constants.OS_DIAG_RUN_BY_URL, [this.runByUrlSucceed, this.runByUrlFailed, data]);
        };
        OsDiag.runScan = function () {
            LSBV5.Emitter.fire(Constants.OS_DIAG_SCAN, [this.scanSucceed, this.scanFailed]);
        };
        OsDiag.runById = function (data) {
            LSBV5.Emitter.fire(Constants.OS_DIAG_RUN_BY_ID, [this.runByIdSucceed, this.runByIdFailed, data]);
        };
        OsDiag.runByName = function (data) {
            LSBV5.Emitter.fire(Constants.OS_DIAG_RUN_BY_NAME, [this.runByIdSucceed, this.runByIdFailed, data]);
        };
        OsDiag.requestRunByUrl = function (onSucceed, onFail, params) {
            var url = _super.getRequestURL.call(this, Constants.OS_DIAG_RUN_BY_URL);
            var req = {
                url: url,
                method: 'post',
                data: params
            };
            _super.sendRequest.call(this, req, onSucceed, onFail);
        };
        OsDiag.requestScan = function (onSucceed, onFail, params) {
            var url = _super.getRequestURL.call(this, Constants.OS_DIAG_SCAN);
            var req = {
                url: url,
                method: 'post',
                data: params
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        OsDiag.requestRunById = function (onSucceed, onFail, params) {
            var url = _super.getRequestURL.call(this, Constants.OS_DIAG_RUN_BY_ID);
            var req = {
                url: url,
                method: 'post',
                data: params
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        OsDiag.requestRunByName = function (onSucceed, onFail, params) {
            var url = _super.getRequestURL.call(this, Constants.OS_DIAG_RUN_BY_NAME);
            var req = {
                url: url,
                method: 'post',
                data: params
            };
            _super.sendRequest.call(this, req, onSucceed, onFail, 'post');
        };
        return OsDiag;
    }(Core));
    LSBV5.OsDiag = OsDiag;
    var EventHandler = /** @class */ (function () {
        function EventHandler(eventType, action, eventHandler) {
            this.EventType = eventType;
            this.Action = action;
            this.EventHandler = eventHandler;
        }
        return EventHandler;
    }());
    LSBV5.EventHandler = EventHandler;
    var Dispatcher = /** @class */ (function () {
        function Dispatcher() {
        }
        Dispatcher.registerEventListener = function (eventHandler) {
            this.EVENT_ARRAY.push(eventHandler);
        };
        Dispatcher.batchAddEventListener = function (callback, comType, eventType) {
            for (var index = 0; index < eventType.length; index++) {
                var element = eventType[index];
                this.addEventListener(element, comType, callback);
            }
        };
        Dispatcher.addEventListener = function (eventType, comType, callback) {
            var action = this.getAction(eventType, comType);
            var currentItem = new EventHandler(eventType, action, callback);
            this.registerEventListener(currentItem);
        };
        Dispatcher.addOnlyEventListener = function (eventType, comType, callback) {
            var action = this.getAction(eventType, comType);
            var currentItem = new EventHandler(eventType, action, callback);
            Dispatcher.removeEventListener(action);
            this.registerEventListener(currentItem);
        };
        Dispatcher.getAction = function (eventType, comType) {
            var action = comType + "_" + eventType;
            return action;
        };
        Dispatcher.removeEventListener = function (action) {
            var _this_1 = this;
            if (action) {
                var removeEvents = this.EVENT_ARRAY.filter(function (eh) { return eh.Action === action; });
                if (removeEvents != null && removeEvents.length > 0) {
                    var removeEventIndex_1 = -1;
                    removeEvents.forEach(function (eh) {
                        removeEventIndex_1 = _this_1.EVENT_ARRAY.indexOf(eh);
                        _this_1.EVENT_ARRAY.splice(removeEventIndex_1, 1);
                    });
                }
            }
        };
        Dispatcher.getEventListener = function (action) {
            if (action) {
                var getEvents = this.EVENT_ARRAY.filter(function (eh) { return eh.Action === action; });
                if (getEvents != null && getEvents.length > 0) {
                    return getEvents;
                }
                else {
                    return;
                }
            }
        };
        Dispatcher.execCommand = function (comType, cmdType, data) {
            if (comType == ComponentTypeEnum.Adup) {
                switch (cmdType) {
                    case cmdType = CommandTypeEnum.DownloadCancel:
                        LSBV5.Adup.runDownloadCancel();
                        break;
                    case cmdType = CommandTypeEnum.InstallCancel:
                        LSBV5.Adup.runInstallCancel();
                        break;
                    case cmdType = CommandTypeEnum.ScanCancel:
                        LSBV5.Adup.runScanCancel();
                        break;
                    case cmdType = CommandTypeEnum.InstallPackage:
                        LSBV5.Adup.runInstallPackage(data);
                        break;
                    case cmdType = CommandTypeEnum.Scan:
                        LSBV5.Adup.runScan();
                        break;
                    case cmdType = CommandTypeEnum.InstallTvsu:
                        LSBV5.Adup.runInstallTvsu();
                        break;
                    default:
                        break;
                }
            }
            else if (comType == ComponentTypeEnum.SysDiag) {
                switch (cmdType) {
                    case cmdType = CommandTypeEnum.Scan:
                        LSBV5.HwDiag.run(data);
                        break;
                    case cmdType = CommandTypeEnum.ScanCancel:
                        LSBV5.HwDiag.cancel();
                        break;
                    default:
                        break;
                }
            }
            else if (comType == ComponentTypeEnum.OsDiag) {
                switch (cmdType) {
                    case cmdType = CommandTypeEnum.OsDiag:
                        LSBV5.OsDiag.runByUrl(data);
                        break;
                    case cmdType = CommandTypeEnum.OsDiagScan:
                        LSBV5.OsDiag.runScan();
                        break;
                    case cmdType = CommandTypeEnum.OsDiagRunById:
                        LSBV5.OsDiag.runById(data);
                        break;
                    case cmdType = CommandTypeEnum.OsDiagRunByName:
                        LSBV5.OsDiag.runByName(data);
                        break;
                    default:
                        break;
                }
            }
            else {
                switch (cmdType) {
                    case cmdType = CommandTypeEnum.CheckLsb:
                        LSBV5.Core.runCheckLsb(data);
                        break;
                    default:
                        break;
                }
            }
        };
        Dispatcher.EVENT_ARRAY = [];
        return Dispatcher;
    }());
    LSBV5.Dispatcher = Dispatcher;
    var Emitter = /** @class */ (function () {
        function Emitter() {
        }
        Emitter.register = function (name, callback, context, intervalTime) {
            var observers = Emitter.listeners[name];
            if (!observers) {
                Emitter.listeners[name] = [];
                Emitter.listeners[name].push(new Observer(callback, context, intervalTime));
            }
            else {
                console.log("The  event name " + name + " was exists!");
            }
        };
        Emitter.reRegister = function (name, callback, context, intervalTime) {
            this.remove(name, callback, context);
            this.register(name, callback, context, intervalTime);
        };
        Emitter.remove = function (name, callback, context) {
            var observers = Emitter.listeners[name];
            if (!observers) {
                return;
            }
            var length = observers.length;
            for (var i = 0; i < length; i++) {
                var observer = observers[i];
                if (observer.compare(context)) {
                    observer.clearCurrentHandle();
                    observers.splice(i, 1);
                    break;
                }
            }
            if (observers.length == 0) {
                delete Emitter.listeners[name];
            }
        };
        Emitter.removeAll = function (context) {
            for (var key in Emitter.listeners) {
                console.log("remove current item:" + key);
                var observers = Emitter.listeners[key];
                if (!observers) {
                    return;
                }
                var length_1 = observers.length;
                for (var i = 0; i < length_1; i++) {
                    var observer = observers[i];
                    if (context && observer.compare(context)) {
                        observer.clearCurrentHandle();
                        observers.splice(i, 1);
                        break;
                    }
                }
                if (observers.length == 0) {
                    delete Emitter.listeners[key];
                }
            }
        };
        Emitter.resetRunStatus = function (name) {
            var observers = Emitter.listeners[name];
            if (!observers) {
                return;
            }
            var length = observers.length;
            for (var i = 0; i < length; i++) {
                var observer = observers[i];
                observer.resetRunStatus();
            }
        };
        Emitter.fire = function (name, params, onlyOne) {
            this.recordFire = {
                name: name,
                params: params,
                onlyOne: onlyOne
            };
            var observers = Emitter.listeners[name];
            if (!observers) {
                return;
            }
            var length = observers.length;
            for (var i = 0; i < length; i++) {
                var observer = observers[i];
                if (!observer.getFired()) {
                    observer.notify(params, onlyOne);
                }
                else {
                    console.log("Observer Name:" + name + "has fired");
                }
            }
        };
        Emitter.unFire = function (name) {
            var observers = Emitter.listeners[name];
            if (!observers) {
                return;
            }
            var length = observers.length;
            for (var i = 0; i < length; i++) {
                var observer = observers[i];
                if (observer.getFired()) {
                    observer.resetRunStatus();
                    observer.clearCurrentHandle();
                }
            }
        };
        Emitter.listeners = {};
        Emitter.recordFire = {};
        return Emitter;
    }());
    LSBV5.Emitter = Emitter;
    var Observer = /** @class */ (function () {
        function Observer(callback, context, intervalTime) {
            this.callback = new Function();
            this.context = null;
            this.currentHandle = null;
            this.isRunning = false;
            this.intervalTime = Constants.INTERVAL_TICKS;
            this.retry = 0;
            var self = this;
            self.callback = callback;
            self.context = context;
            if (intervalTime) {
                self.intervalTime = intervalTime;
            }
        }
        Observer.prototype.getFired = function () {
            return this.isRunning;
        };
        Observer.prototype.resetRunStatus = function () {
            this.isRunning = false;
        };
        Observer.prototype.clearCurrentHandle = function () {
            if (this.currentHandle) {
                clearInterval(this.currentHandle);
            }
        };
        Observer.prototype.notify = function (params, oneTimeRun) {
            var self = this;
            self.context.retry = Constants.REQUEST_RETRY_COUNT;
            if (oneTimeRun) {
                this.isRunning = true;
                this.currentHandle = setInterval(function () {
                    self.callback.apply(self.context, params);
                }, this.intervalTime);
            }
            else {
                self.callback.apply(self.context, params);
            }
        };
        Observer.prototype.compare = function (context) {
            return context == this.context;
        };
        return Observer;
    }());
})(LSBV5 || (LSBV5 = {}));